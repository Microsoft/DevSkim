@page "/viewcode/{Guid}"
@using Microsoft.CodeAnalysis.Sarif;
@using System.Text;
@using Newtonsoft.Json; 
@inject Blazored.LocalStorage.ILocalStorageService localStorage;

    <div>
        @if (FileName != null)
        {
            <p>Viewing Results for "<b>@FileName</b>" during run "<b>@RunId</b>"</p>
            @foreach (var result in filteredResults)
            {
                <p>Rule: @result.RuleId</p>
                <p>Message: @result.Message.Text</p>
                <p>Found on line @result.Locations[0].PhysicalLocation.Region.StartLine</p>
                <code class="lang-@Language">
                    @result.Locations[0].PhysicalLocation.Region.Snippet.Text
                </code>

            }
        }
        else
        {
            <p>Could not fetch file information given @Guid</p>
        }
    </div>


@code {
    [Parameter]
    public string Guid { get; set; } = "Not Provided";

    public string? FileName { get; set; }

    public string? Code { get; set; }

    public string? Language { get; set; }

    public string? RunId { get; set; }

    private List<Result> filteredResults = new List<Result>();

    protected override async Task OnInitializedAsync()
    {
        var res = await localStorage.GetItemAsync<Results>("DevSkimResults");
        var theGuid = Guid;
        var codeFile = await localStorage.GetItemAsync<CodeFile>(Guid);

        Code = codeFile.Content;
        FileName = codeFile.FileName;
        Language = Microsoft.DevSkim.Language.FromFileName(FileName ?? string.Empty);
        RunId = codeFile.RunId;

        if (RunId != null)
        {
            var sarif = await localStorage.GetItemAsStringAsync(res.ResultLocations[RunId]);
            using var stream = new System.IO.MemoryStream(Encoding.UTF8.GetBytes(sarif));
            var loadedSarif = SarifLog.Load(stream);
            var results = loadedSarif.Runs[0].Results;
            var preparedFileName = System.IO.Path.GetFullPath(FileName ?? string.Empty);

            if (results != null)
            {
                foreach(var result in results)
                {
                    foreach(var location in result.Locations)
                    {
                        if (preparedFileName.Equals(location.PhysicalLocation.Address.FullyQualifiedName))
                        {
                            filteredResults.Add(result);
                            break;
                        }
                    }
                }
            }
        }
        this.StateHasChanged();
    }
}
