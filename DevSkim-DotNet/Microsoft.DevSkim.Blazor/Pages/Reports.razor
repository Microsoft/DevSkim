@page "/reports"
@using System.Diagnostics;
@using Microsoft.CodeAnalysis.Sarif;
@inject Blazored.LocalStorage.ILocalStorageService localStorage;

<h1>Report Viewer</h1>

<Dropdown TItem="string">
    <InitialTip>Select Run</InitialTip>
    <ChildContent>
        @foreach (var runId in RunList)
        {
            <DropdownListItem Item="@runId">@runId</DropdownListItem>
        }
    </ChildContent>
</Dropdown>

<br />

<!-- <button onclick="GetResults">Get Results</button> -->
<button>Get Results</button>

<br />

<textarea style="max-width: 100%;" cols="100" rows="10">@Status</textarea>
<textarea style="max-width: 100%;" cols="100" rows="100">@Output</textarea>

@code {
    [Parameter]
    public string SelectedRun { get; set; } = "";

    private static string nl = Environment.NewLine;
    public string Status { get; set; } = "Idle";
    public string Output { get; set; } = "";
    public IList<string> RunList = new List<string> {"test1", "test2"};

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await ReadStorage();
        }
    }

    public async Task ReadStorage()
    {
        try
        {
            Status = $"Reading storage...{nl}";
            this.StateHasChanged();
            //var res = await localStorage.GetItemAsync<Results>("DevSkimResults");
            //RunList = res.RunIds;

            Status += $"Found {RunList.Count} runs.{nl}";
            this.StateHasChanged();
        }
        catch(Exception e)
        {
            var message = e.Message;
            var stackTrace = e.StackTrace;
            var type = e.GetType();
            var name = type.Name;
            Console.WriteLine(e.Message);
        }
    }

    public async Task GetResults(string runId)
    {
        var stopwatch = new Stopwatch();
        stopwatch.Start();


        Status += $"Retrieving run Id: {runId}{nl}";
        this.StateHasChanged();
        var key = $"DevSkim-{runId}-Results";
        var sarifData = await localStorage.GetItemAsync<Results>(key);

        Status += $"Reading results...{nl}";
        this.StateHasChanged();
        Output += $"{sarifData}{nl}";
        // Actual useful parsing goes here.

        Status += $"Finished reading results for run Id: {runId}{nl}";
        stopwatch.Stop();
        Status += $"Elapsed time: {stopwatch.Elapsed}{nl}";
        this.StateHasChanged();
    }
}