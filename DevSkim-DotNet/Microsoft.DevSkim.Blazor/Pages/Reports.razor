@page "/reports"
@page "/reports/{CurrentRunId}"
@using Microsoft.CodeAnalysis.Sarif;
@using System.Text;
@inject Blazored.LocalStorage.ILocalStorageService localStorage;

<h1>Report Viewer</h1>

<div>Select Run</div>
<Dropdown TItem="string" OnSelected="@OnSelected">
    <ChildContent>
        <div class="dropdown-divider"></div>
        @foreach (var runId in RunList)
        {
            <DropdownListItem Item="@runId">@runId</DropdownListItem>
        }
    </ChildContent>
</Dropdown>

<br />

<button @onclick="GetResults">Get Results</button>
<button @onclick="ClearLocalStorage">Clear Storage</button>

<br />

<div style="width:800px; height:300px; border-style:solid; border-color:black;">@Status</div>
<div style="width:800px; height:1200px; border-style:solid; border-color:black;">
    @foreach (var finding in Findings)
    {
        <div>
            <span>@finding.Key</span> <a href="/viewcode/@finding.Value.Item1">@finding.Value.Item2 issues found. </a>
        </div>
    }
</div>

@code {
    [Parameter]
    public string CurrentRunId { get; set; } = string.Empty;
    private static string nl = Environment.NewLine;
    private string SelectedRun { get; set; } = "";
    public string Status { get; set; } = "Idle";
    public IList<string> RunList = new List<string> { };
    public IDictionary<string, (string,int)> Findings = new Dictionary<string, (string, int)>();
    private Results results;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await ReadStorage();
            if (!string.IsNullOrEmpty(CurrentRunId))
            {
                SelectedRun = results.RunIdMap[CurrentRunId];
                await GetResults();
            }
        }
    }

    public async void ClearLocalStorage()
    {
        SelectedRun = "";
        Status = "Idle";
        RunList.Clear();
        Findings.Clear();
        await localStorage.ClearAsync();
        StateHasChanged();
    }

    private void OnSelected(string selection)
    {
        SelectedRun = selection;
        GetResults();
    }

    public async Task ReadStorage()
    {
        try
        {
            Status = $"Reading storage...{nl}";
            this.StateHasChanged();
            var res = await localStorage.GetItemAsync<Results>("DevSkimResults");
            if (res == null)
                res = new Results();
            results = res;
            RunList = res.RunIdMap.Values.ToList();

            Status += $"Found {RunList.Count} runs.{nl}";
            this.StateHasChanged();
        }
        catch (Exception e)
        {
            var message = e.Message;
            var stackTrace = e.StackTrace;
            var type = e.GetType();
            var name = type.Name;
            Console.WriteLine(e.Message);
        }
    }

    public async Task GetResults()
    {
        try
        {
            var runId = SelectedRun;
            if (String.IsNullOrWhiteSpace(runId))
            {
                Status = $"No run selected.{nl}";
                this.StateHasChanged();
                return;
            }

            Status += $"Reading results of Run ID: {runId}{nl}";
            this.StateHasChanged();

            var res = await localStorage.GetItemAsync<Results>("DevSkimResults");

            // Displays run summary parsed from sarif
            var location = res.ResultLocations[runId];
            var sarif = await localStorage.GetItemAsync<string>(location);
            Findings.Add(sarif, ("",0));

            using var stream = new System.IO.MemoryStream(Encoding.UTF8.GetBytes(sarif));
            var log = SarifLog.Load(stream);

            // Lists run files and GUID links
            foreach (var loc in res.FileLocations[runId])
            {
                if (log.Runs[0].Results.Count(x => x.Locations.Any(y => y.PhysicalLocation.Address.FullyQualifiedName == loc.Key)) is int count && count > 0)
                {
                    Findings.Add(loc.Key, (loc.Value, count));
                }
            }
            Status += $"Finished reading results of Run ID: {SelectedRun}{nl}";
            this.StateHasChanged();
        }
        catch (Exception e)
        {
            var message = e.Message;
            var stackTrace = e.StackTrace;
            var type = e.GetType();
            var name = type.Name;
            Console.WriteLine(e.Message);
        }
    }
}