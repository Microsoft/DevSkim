# Azure Pipelines
# https://aka.ms/yaml

name: DevSkim_CLI_$(SourceBranchName)_$(Date:yyyyMMdd)$(Rev:.r)
trigger:
  batch: true
  branches:
    include:
    - master
  paths:
    include:
    - DevSkim-DotNet/Microsoft.DevSkim/*
    - DevSkim-DotNet/Microsoft.DevSkim.CLI/*
    - rules/*
pr:
  branches:
    include:
    - master
  paths:
    include:
    - DevSkim-DotNet/Microsoft.DevSkim/*
    - DevSkim-DotNet/Microsoft.DevSkim.CLI/*
    - rules/*

stages:
- stage: Publish
  jobs:
  - job: publish_nix
    displayName: Publish Linux & Mac
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: UseDotNet@2
      inputs:
        packageType: 'sdk'
        version: '3.1.100'
    - task: DotNetCoreCLI@2
      displayName: Dotnet Publish Linux x64
      inputs:
        command: 'publish'
        arguments: 'Microsoft.DevSkim.CLI -c $(BuildConfiguration) -o $(Build.BinariesDirectory)/linux/DevSkim_$(ReleaseVersion) -f netcoreapp3.1 -r linux-x64 /p:DebugType=None'
        workingDirectory: '$(SolutionDirectory)'
        publishWebProjects: false
        zipAfterPublish: false
    - task: DotNetCoreCLI@2
      displayName: Dotnet Publish MacOS x64
      inputs:
        command: 'publish'
        arguments: 'Microsoft.DevSkim.CLI -c $(BuildConfiguration) -o $(Build.BinariesDirectory)/macos/DevSkim_$(ReleaseVersion) -f netcoreapp3.1 -r osx-x64 /p:DebugType=None'
        workingDirectory: '$(SolutionDirectory)'
        publishWebProjects: false
        zipAfterPublish: false
    - task: ArchiveFiles@2
      displayName: Archive Artifact - Linux
      inputs:
        rootFolderOrFile: '$(Build.BinariesDirectory)/linux/DevSkim_$(ReleaseVersion)'
        includeRootFolder: true
        archiveType: 'zip'
        archiveFile: '$(Build.StagingDirectory)/DevSkim_linux_$(ReleaseVersion).zip'
        replaceExistingArchive: true
    - task: ArchiveFiles@2
      displayName: Archive Artifact - MacOS
      inputs:
        rootFolderOrFile: '$(Build.BinariesDirectory)/macos/DevSkim_$(ReleaseVersion)'
        includeRootFolder: true
        archiveType: 'zip'
        archiveFile: '$(Build.StagingDirectory)/DevSkim_macos_$(ReleaseVersion).zip'
        replaceExistingArchive: true
    - task: PublishBuildArtifacts@1
      displayName: Store Linux & Mac Archives
      inputs:
        PathtoPublish: '$(Build.StagingDirectory)'
        ArtifactName: 'NixArchives'
        publishLocation: 'Container'


  - job: publish_win
    displayName: Publish Windows, NetCore, Nupkg
    pool:
      vmImage: 'windows-latest'
    steps:
    - task: UseDotNet@2
      inputs:
        packageType: 'sdk'
        version: '3.1.100'
    - task: DotNetCoreCLI@2
      displayName: Dotnet Publish Windows x86
      inputs:
        command: 'publish'
        arguments: 'Microsoft.DevSkim.CLI -c $(BuildConfiguration) -o $(Build.BinariesDirectory)\windows\DevSkim_$(ReleaseVersion) -f netcoreapp3.1 -r win-x86 /p:DebugType=None'
        workingDirectory: '$(SolutionDirectory)'
        publishWebProjects: false
        zipAfterPublish: false
    - task: DotNetCoreCLI@2
      displayName: Dotnet Build .NET Core App
      inputs:
        command: 'build'
        arguments: 'Microsoft.DevSkim.CLI -c $(BuildConfiguration) -o $(Build.BinariesDirectory)\netcoreapp3.1\DevSkim_$(ReleaseVersion) -f netcoreapp3.1 /p:DebugType=None'
        workingDirectory: '$(SolutionDirectory)'
        publishWebProjects: false
        zipAfterPublish: false
    - task: DotNetCoreCLI@2
      displayName: Pack Nupkg
      inputs:
        command: 'custom'
        custom: 'pack'
        arguments: 'Microsoft.DevSkim -c Release -o $(Build.BinariesDirectory)\nuget\DevSkim_$(ReleaseVersion)'
        workingDirectory: '$(SolutionDirectory)'
    - task: AntiMalware@3
      displayName: Anti-Malware Scan
      inputs:
        InputType: 'Basic'
        ScanType: 'CustomScan'
        FileDirPath: '$(Build.BinariesDirectory)'
        EnableServices: true
        SupportLogOnError: false
        TreatSignatureUpdateFailureAs: 'Warning'
        SignatureFreshness: 'UpToDate'
        TreatStaleSignatureAs: 'Error'
    - task: EsrpCodeSigning@1
      condition: and(succeeded(), in(variables['Build.Reason'], 'IndividualCI', 'BatchedCI'))
      displayName: Code Sign
      enabled: false
      inputs:
        ConnectedServiceName: ''
        FolderPath: '$(Build.BinariesDirectory)\windows\DevSkim_$(ReleaseVersion)'
        Pattern: ''
        signConfigType: 'inlineSignParams'
        inlineOperation: |
          [ ]
        SessionTimeout: '60'
        MaxConcurrency: '50'
        MaxRetryAttempts: '5'
    - powershell: 'Get-ChildItem -Path ''$(Build.BinariesDirectory)'' -Recurse CodeSign* | foreach { Remove-Item -Path $_.FullName }'
      condition: and(succeeded(), in(variables['Build.Reason'], 'IndividualCI', 'BatchedCI'))
      displayName: 'Delete Code Sign Summaries'
    - task: ArchiveFiles@2
      displayName: Archive Artifact - Windows
      inputs:
        rootFolderOrFile: '$(Build.BinariesDirectory)\windows\DevSkim_$(ReleaseVersion)'
        includeRootFolder: true
        archiveType: 'zip'
        archiveFile: '$(Build.StagingDirectory)\DevSkim_windows_$(ReleaseVersion).zip'
        replaceExistingArchive: true
    - task: ArchiveFiles@2
      displayName: Archive Artifact - .NET Core App
      inputs:
        rootFolderOrFile: '$(Build.BinariesDirectory)\netcoreapp3.1\DevSkim_$(ReleaseVersion)'
        includeRootFolder: true
        archiveType: 'zip'
        archiveFile: '$(Build.StagingDirectory)\DevSkim_netcoreapp3.1_$(ReleaseVersion).zip'
        replaceExistingArchive: true
    - task: ArchiveFiles@2
      displayName: Archive Artifact - Nupkg
      inputs:
        rootFolderOrFile: '$(Build.BinariesDirectory)\nuget\DevSkim_$(ReleaseVersion)'
        includeRootFolder: true
        archiveType: 'zip'
        archiveFile: '$(Build.StagingDirectory)\DevSkim_nupkg_$(ReleaseVersion).zip'
        replaceExistingArchive: true
    - task: PublishBuildArtifacts@1
      displayName: Store Windows, NetCoreApp, Nupkg Archives
      inputs:
        PathtoPublish: '$(Build.StagingDirectory)'
        ArtifactName: 'WinCoreArchives'
        publishLocation: 'Container'


  - job: hashes
    displayName: Generate Hashes
    dependsOn:
    - publish_nix
    - publish_win
    condition: and(succeeded(), in(variables['Build.Reason'], 'IndividualCI', 'BatchedCI'))
    pool:
      vmImage: 'windows-latest'
    steps:
    - task: DownloadBuildArtifacts@0
      displayName: Retrieve Linux & Mac Archives
      inputs:
        buildType: 'current'
        downloadType: 'specific'
        itemPattern: 'NixArchives/*.zip'
        downloadPath: '$(Build.BinariesDirectory)'
    - task: DownloadBuildArtifacts@0
      displayName: Retrieve Windows, NetCoreApp, Nupkg Archives
      inputs:
        buildType: 'current'
        downloadType: 'specific'
        itemPattern: 'WinCoreArchives/*.zip'
        downloadPath: '$(Build.BinariesDirectory)'
    - task: PowerShell@2
      displayName: Move Linux & Mac Archives
      inputs:
        targetType: 'inline'
        script: 'mv $env:BUILD_BINARIESDIRECTORY/NixArchives/*.zip $env:BUILD_STAGINGDIRECTORY'
    - task: PowerShell@2
      displayName: Move Windows & NetCoreApp Archives
      inputs:
        targetType: 'inline'
        script: 'mv $env:BUILD_BINARIESDIRECTORY/WinCoreArchives/*.zip $env:BUILD_STAGINGDIRECTORY'
    - task: PowerShell@2
      displayName: Generate Archive Hashes
      inputs:
        targetType: 'inline'
        script: |
          Get-ChildItem $(Build.StagingDirectory) | Foreach-Object {
            $name = $_.Name
            $tmp = (Get-FileHash "$(Build.StagingDirectory)\$name").Hash
            Add-Content $(Build.StagingDirectory)\HASHES.txt "$tmp`t$name"
          }
    - task: PublishPipelineArtifact@1
      displayName: Publish All Artifacts
      inputs:
        targetPath: '$(Build.StagingDirectory)'
        artifact: 'Binaries'