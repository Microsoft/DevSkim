@page "/reports"
@using Microsoft.CodeAnalysis.Sarif;
@inject Blazored.LocalStorage.ILocalStorageService localStorage;

<h1>Report Viewer</h1>

<div>Select Run</div>
<Dropdown TItem="string" OnSelected="@OnSelected">
    <ChildContent>
        <div class="dropdown-divider"></div>
        @foreach (var runId in RunList)
        {
            <DropdownListItem Item="@runId">@runId</DropdownListItem>
        }
    </ChildContent>
</Dropdown>

<br />

<button @onclick="GetResults">Get Results</button>

<br />

<textarea style="max-width: 100%;" cols="100" rows="10">@Status</textarea>
<textarea style="max-width: 100%;" cols="100" rows="100">@Output</textarea>

@code {


    private static string nl = Environment.NewLine;
    private string SelectedRun { get; set; } = "";
    public string Status { get; set; } = "Idle";
    public string Output { get; set; } = "";
    public IList<string> RunList = new List<string> {};


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await ReadStorage();
        }
    }

    private void OnSelected(string selection)
    {
        SelectedRun = selection;
    }

    public async Task ReadStorage()
    {
        try
        {
            Status = $"Reading storage...{nl}";
            this.StateHasChanged();
            var res = await localStorage.GetItemAsync<Results>("DevSkimResults");
            if (res == null)
                res = new Results();
            RunList = res.RunIds;

            Status += $"Found {RunList.Count} runs.{nl}";
            this.StateHasChanged();
        }
        catch(Exception e)
        {
            var message = e.Message;
            var stackTrace = e.StackTrace;
            var type = e.GetType();
            var name = type.Name;
            Console.WriteLine(e.Message);
        }
    }

    public async Task GetResults()
    {
        var runId = SelectedRun;
        if (String.IsNullOrWhiteSpace(runId))
        {
            Output = "No run selected.";
            this.StateHasChanged();
            return;
        }

        Status += $"Reading results of Run ID: {runId}{nl}";
        this.StateHasChanged();

        var res = await localStorage.GetItemAsync<Results>("DevSkimResults");
        Output = $"Results of {runId}:{nl}";
        foreach (var item in res.FileLocations[runId])
        {
            Output += $"{item.ToString()}{nl}";
        }

        Status += $"Finished reading results of Run ID: {SelectedRun}{nl}";
        this.StateHasChanged();
    }
}