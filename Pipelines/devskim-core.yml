# Azure Pipelines
# https://aka.ms/yaml

name: DevSkim_CLI_$(SourceBranchName)_$(Date:yyyyMMdd)$(Rev:.r)
trigger:
  batch: true
  branches:
    include:
    - master
  paths:
    include:
    - DevSkim-DotNet/Microsoft.DevSkim/*
    - DevSkim-DotNet/Microsoft.DevSkim.CLI/*
    - rules/*
pr:
  branches:
    include:
    - master
  paths:
    include:
    - DevSkim-DotNet/Microsoft.DevSkim/*
    - DevSkim-DotNet/Microsoft.DevSkim.CLI/*
    - rules/*

stages:
- stage: Build
  jobs:
  - job: build_nix
    displayName: Build Linux & Mac
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: UseDotNet@2
      inputs:
        packageType: 'sdk'
        version: '3.1.100'
    - script: 'dotnet tool install -g nbgv'
      displayName: 'Install GitVersioning'
    - task: Bash@3
      displayName: Set Release Version
      inputs:
        targetType: 'inline'
        script: |
          version=(nbgv get-version -v AssemblyInformationalVersion).split('+')[0]
          echo "##vso[task.setvariable variable=ReleaseVersion]$version"
        workingDirectory: '$(SolutionDirectory)'
    - task: DotNetCoreCLI@2
      displayName: Dotnet Publish Linux x64
      inputs:
        command: 'publish'
        arguments: 'Microsoft.DevSkim.CLI -c $(BuildConfiguration) -o $(Build.BinariesDirectory)/linux/DevSkim_$(ReleaseVersion) -f netcoreapp3.1 -r linux-x64 /p:DebugType=None'
        workingDirectory: '$(SolutionDirectory)'
        publishWebProjects: false
        zipAfterPublish: false
    - task: DotNetCoreCLI@2
      displayName: Dotnet Publish MacOS x64
      inputs:
        command: 'publish'
        arguments: 'Microsoft.DevSkim.CLI -c $(BuildConfiguration) -o $(Build.BinariesDirectory)/macos/DevSkim_$(ReleaseVersion) -f netcoreapp3.1 -r osx-x64 /p:DebugType=None'
        workingDirectory: '$(SolutionDirectory)'
        publishWebProjects: false
        zipAfterPublish: false
    - task: ArchiveFiles@2
      displayName: Archive Artifact - Linux
      inputs:
        rootFolderOrFile: '$(Build.BinariesDirectory)/linux/'
        includeRootFolder: true
        archiveType: 'zip'
        archiveFile: '$(Build.StagingDirectory)/DevSkim_linux_$(ReleaseVersion).zip'
        replaceExistingArchive: true
    - task: ArchiveFiles@2
      displayName: Archive Artifact - MacOS
      inputs:
        rootFolderOrFile: '$(Build.BinariesDirectory)/macos/'
        includeRootFolder: true
        archiveType: 'zip'
        archiveFile: '$(Build.StagingDirectory)/DevSkim_macos_$(ReleaseVersion).zip'
        replaceExistingArchive: true
    - task: PublishBuildArtifacts@1
      displayName: Store Linux & Mac Archives
      inputs:
        PathtoPublish: '$(Build.StagingDirectory)'
        ArtifactName: 'Unsigned_Nix'
        publishLocation: 'Container'


  - job: build_win
    displayName: Build Windows, NetCoreApp, Nupkg
    pool:
      vmImage: 'windows-latest'
    steps:
    - task: UseDotNet@2
      inputs:
        packageType: 'sdk'
        version: '3.1.100'
    - script: 'dotnet tool install -g nbgv'
      displayName: 'Install GitVersioning'
    - task: PowerShell@2
      displayName: Set Release Version
      inputs:
        targetType: 'inline'
        script: |
          $version = (nbgv get-version -v AssemblyInformationalVersion).split('+')[0]
          Write-Host "##vso[task.setvariable variable=ReleaseVersion;]$version"
        workingDirectory: '$(SolutionDirectory)'
    - task: DotNetCoreCLI@2
      displayName: Dotnet Publish Windows x86
      inputs:
        command: 'publish'
        arguments: 'Microsoft.DevSkim.CLI -c $(BuildConfiguration) -o $(Build.BinariesDirectory)\windows\DevSkim_$(ReleaseVersion) -f netcoreapp3.1 -r win-x86 /p:DebugType=None'
        workingDirectory: '$(SolutionDirectory)'
        publishWebProjects: false
        zipAfterPublish: false
    - task: DotNetCoreCLI@2
      displayName: Dotnet Build .NET Core App
      inputs:
        command: 'build'
        arguments: 'Microsoft.DevSkim.CLI -c $(BuildConfiguration) -o $(Build.BinariesDirectory)\netcoreapp\DevSkim_$(ReleaseVersion) -f netcoreapp3.1 /p:DebugType=None'
        workingDirectory: '$(SolutionDirectory)'
        publishWebProjects: false
        zipAfterPublish: false
    - task: DotNetCoreCLI@2
      displayName: Pack Nupkg
      inputs:
        command: 'custom'
        custom: 'pack'
        arguments: 'Microsoft.DevSkim -c Release -o $(Build.BinariesDirectory)\nuget\DevSkim_$(ReleaseVersion)'
        workingDirectory: '$(SolutionDirectory)'
    - task: AntiMalware@3
      displayName: Anti-Malware Scan
      inputs:
        InputType: 'Basic'
        ScanType: 'CustomScan'
        FileDirPath: '$(Build.BinariesDirectory)'
        EnableServices: true
        SupportLogOnError: false
        TreatSignatureUpdateFailureAs: 'Warning'
        SignatureFreshness: 'UpToDate'
        TreatStaleSignatureAs: 'Error'
    - task: ArchiveFiles@2
      displayName: Archive Artifact - Windows
      inputs:
        rootFolderOrFile: '$(Build.BinariesDirectory)\windows'
        includeRootFolder: true
        archiveType: 'zip'
        archiveFile: '$(Build.StagingDirectory)\DevSkim_windows_$(ReleaseVersion).zip'
        replaceExistingArchive: true
    - task: ArchiveFiles@2
      displayName: Archive Artifact - .NET Core App
      inputs:
        rootFolderOrFile: '$(Build.BinariesDirectory)\netcoreapp'
        includeRootFolder: true
        archiveType: 'zip'
        archiveFile: '$(Build.StagingDirectory)\DevSkim_netcoreapp_$(ReleaseVersion).zip'
        replaceExistingArchive: true
    - task: ArchiveFiles@2
      displayName: Archive Artifact - Nupkg
      inputs:
        rootFolderOrFile: '$(Build.BinariesDirectory)\nuget'
        includeRootFolder: true
        archiveType: 'zip'
        archiveFile: '$(Build.StagingDirectory)\DevSkim_nuget_$(ReleaseVersion).zip'
        replaceExistingArchive: true
    - task: PublishBuildArtifacts@1
      displayName: Store Windows, NetCoreApp, Nupkg Archives
      inputs:
        PathtoPublish: '$(Build.StagingDirectory)'
        ArtifactName: 'Unsigned_WinNuget'
        publishLocation: 'Container'


  - job: sign_hash_release
    displayName: Code Sign, Generate Hashes, Publish Public Releases
    dependsOn:
    - build_nix
    - build_win
    condition: and(succeeded(), in(variables['Build.Reason'], 'IndividualCI', 'BatchedCI'))
    pool:
      vmImage: 'windows-latest'
    steps:
    - task: UseDotNet@2
      inputs:
        packageType: 'sdk'
        version: '3.1.100'
    - script: 'dotnet tool install -g nbgv'
      displayName: 'Install GitVersioning'
    - task: PowerShell@2
      displayName: Set Release Version
      inputs:
        targetType: 'inline'
        script: |
          $version = (nbgv get-version -v AssemblyInformationalVersion).split('+')[0]
          Write-Host "##vso[task.setvariable variable=ReleaseVersion;]$version"
        workingDirectory: '$(SolutionDirectory)'
    - task: DownloadBuildArtifacts@0
      displayName: Retrieve Linux & Mac Archives
      inputs:
        buildType: 'current'
        downloadType: 'specific'
        itemPattern: 'Unsigned_Nix\*.zip'
        downloadPath: '$(Build.BinariesDirectory)'
    - task: DownloadBuildArtifacts@0
      displayName: Retrieve Windows, NetCoreApp, Nupkg Archives
      inputs:
        buildType: 'current'
        downloadType: 'specific'
        itemPattern: 'Unsigned_WinNuget\*.zip'
        downloadPath: '$(Build.BinariesDirectory)'
    - task: ExtractFiles@1
      displayName: Extract Artifacts for Signing
      inputs:
        archiveFilePatterns: '$(Build.BinariesDirectory)\*.zip'
        destinationFolder: '$(Build.BinariesDirectory)'
        cleanDestinationFolder: false
    - task: AntiMalware@3
      displayName: Anti-Malware Scan
      inputs:
        InputType: 'Basic'
        ScanType: 'CustomScan'
        FileDirPath: '$(Build.BinariesDirectory)'
        EnableServices: true
        SupportLogOnError: false
        TreatSignatureUpdateFailureAs: 'Warning'
        SignatureFreshness: 'UpToDate'
        TreatStaleSignatureAs: 'Error'
    - task: EsrpCodeSigning@1
      displayName: Code Sign Linux
      inputs:
        ConnectedServiceName: 'Devskim_CodeSign'
        FolderPath: '$(Build.BinariesDirectory)/linux/DevSkim_$(ReleaseVersion)'
        Pattern: 'devskim.dll, Microsoft.DevSkim.dll'
        signConfigType: 'inlineSignParams'
        inlineOperation: |
          [
                  {
                      "KeyCode" : "CP-230012",
                      "OperationCode" : "SigntoolSign",
                      "Parameters" : {
                          "OpusName" : "Microsoft",
                          "OpusInfo" : "http://www.microsoft.com",
                          "FileDigest" : "/fd \"SHA256\"",
                          "PageHash" : "/NPH",
                          "TimeStamp" : "/tr \"http://rfc3161.gtm.corp.microsoft.com/TSS/HttpTspServer\" /td sha256"
                      },
                      "ToolName" : "sign",
                      "ToolVersion" : "1.0"
                  },
                  {
                      "KeyCode" : "CP-230012",
                      "OperationCode" : "SigntoolVerify",
                      "Parameters" : {},
                      "ToolName" : "sign",
                      "ToolVersion" : "1.0"
                  }
              ]
        SessionTimeout: '60'
        MaxConcurrency: '50'
        MaxRetryAttempts: '5'
    - task: EsrpCodeSigning@1
      displayName: Code Sign MacOS
      inputs:
        ConnectedServiceName: 'Devskim_CodeSign'
        FolderPath: '$(Build.BinariesDirectory)/macos/DevSkim_$(ReleaseVersion)'
        Pattern: 'devskim.dll, Microsoft.DevSkim.dll'
        signConfigType: 'inlineSignParams'
        inlineOperation: |
          [
                  {
                      "KeyCode" : "CP-230012",
                      "OperationCode" : "SigntoolSign",
                      "Parameters" : {
                          "OpusName" : "Microsoft",
                          "OpusInfo" : "http://www.microsoft.com",
                          "FileDigest" : "/fd \"SHA256\"",
                          "PageHash" : "/NPH",
                          "TimeStamp" : "/tr \"http://rfc3161.gtm.corp.microsoft.com/TSS/HttpTspServer\" /td sha256"
                      },
                      "ToolName" : "sign",
                      "ToolVersion" : "1.0"
                  },
                  {
                      "KeyCode" : "CP-230012",
                      "OperationCode" : "SigntoolVerify",
                      "Parameters" : {},
                      "ToolName" : "sign",
                      "ToolVersion" : "1.0"
                  }
              ]
        SessionTimeout: '60'
        MaxConcurrency: '50'
        MaxRetryAttempts: '5'
    - task: EsrpCodeSigning@1
      displayName: Code Sign Windows
      inputs:
        ConnectedServiceName: 'Devskim_CodeSign'
        FolderPath: '$(Build.BinariesDirectory)/windows/DevSkim_$(ReleaseVersion)'
        Pattern: 'devskim.exe, devskim.dll, Microsoft.DevSkim.dll'
        signConfigType: 'inlineSignParams'
        inlineOperation: |
          [
                  {
                      "KeyCode" : "CP-230012",
                      "OperationCode" : "SigntoolSign",
                      "Parameters" : {
                          "OpusName" : "Microsoft",
                          "OpusInfo" : "http://www.microsoft.com",
                          "FileDigest" : "/fd \"SHA256\"",
                          "PageHash" : "/NPH",
                          "TimeStamp" : "/tr \"http://rfc3161.gtm.corp.microsoft.com/TSS/HttpTspServer\" /td sha256"
                      },
                      "ToolName" : "sign",
                      "ToolVersion" : "1.0"
                  },
                  {
                      "KeyCode" : "CP-230012",
                      "OperationCode" : "SigntoolVerify",
                      "Parameters" : {},
                      "ToolName" : "sign",
                      "ToolVersion" : "1.0"
                  }
              ]
        SessionTimeout: '60'
        MaxConcurrency: '50'
        MaxRetryAttempts: '5'
    - task: EsrpCodeSigning@1
      displayName: Code Sign .NET Core App
      inputs:
        ConnectedServiceName: 'Devskim_CodeSign'
        FolderPath: '$(Build.BinariesDirectory)/netcoreapp/DevSkim_$(ReleaseVersion)'
        Pattern: 'devskim.exe, devskim.dll, Microsoft.DevSkim.dll'
        signConfigType: 'inlineSignParams'
        inlineOperation: |
          [
                  {
                      "KeyCode" : "CP-230012",
                      "OperationCode" : "SigntoolSign",
                      "Parameters" : {
                          "OpusName" : "Microsoft",
                          "OpusInfo" : "http://www.microsoft.com",
                          "FileDigest" : "/fd \"SHA256\"",
                          "PageHash" : "/NPH",
                          "TimeStamp" : "/tr \"http://rfc3161.gtm.corp.microsoft.com/TSS/HttpTspServer\" /td sha256"
                      },
                      "ToolName" : "sign",
                      "ToolVersion" : "1.0"
                  },
                  {
                      "KeyCode" : "CP-230012",
                      "OperationCode" : "SigntoolVerify",
                      "Parameters" : {},
                      "ToolName" : "sign",
                      "ToolVersion" : "1.0"
                  }
              ]
        SessionTimeout: '60'
        MaxConcurrency: '50'
        MaxRetryAttempts: '5'
    - task: EsrpCodeSigning@1
      displayName: Code Sign Nuget Package
      inputs:
        ConnectedServiceName: 'Devskim_CodeSign'
        FolderPath: '$(Build.BinariesDirectory)/nuget/DevSkim_$(ReleaseVersion)'
        Pattern: '*.nupkg'
        signConfigType: 'inlineSignParams'
        inlineOperation: |
          [
                  {
                      "KeyCode" : "CP-401405",
                      "OperationCode" : "NuGetSign",
                      "Parameters" : {},
                      "ToolName" : "sign",
                      "ToolVersion" : "1.0"
                  },
                  {
                      "KeyCode" : "CP-401405",
                      "OperationCode" : "NuGetVerify",
                      "Parameters" : {},
                      "ToolName" : "sign",
                      "ToolVersion" : "1.0"
                  }
              ]
        SessionTimeout: '60'
        MaxConcurrency: '50'
        MaxRetryAttempts: '5'
    - powershell: 'Get-ChildItem -Path ''$(Build.BinariesDirectory)'' -Recurse CodeSign* | foreach { Remove-Item -Path $_.FullName }'
      displayName: 'Delete Code Sign Summaries'
    - task: ArchiveFiles@2
      displayName: Archive Artifact - Linux
      inputs:
        rootFolderOrFile: '$(Build.BinariesDirectory)/linux/DevSkim_$(ReleaseVersion)'
        includeRootFolder: true
        archiveType: 'zip'
        archiveFile: '$(Build.StagingDirectory)/DevSkim_linux_$(ReleaseVersion).zip'
        replaceExistingArchive: true
    - task: ArchiveFiles@2
      displayName: Archive Artifact - MacOS
      inputs:
        rootFolderOrFile: '$(Build.BinariesDirectory)/macos/DevSkim_$(ReleaseVersion)'
        includeRootFolder: true
        archiveType: 'zip'
        archiveFile: '$(Build.StagingDirectory)/DevSkim_macos_$(ReleaseVersion).zip'
        replaceExistingArchive: true
    - task: ArchiveFiles@2
      displayName: Archive Artifact - Windows
      inputs:
        rootFolderOrFile: '$(Build.BinariesDirectory)/windows/DevSkim_$(ReleaseVersion)'
        includeRootFolder: true
        archiveType: 'zip'
        archiveFile: '$(Build.StagingDirectory)/DevSkim_windows_$(ReleaseVersion).zip'
        replaceExistingArchive: true
    - task: ArchiveFiles@2
      displayName: Archive Artifact - .NET Core App
      inputs:
        rootFolderOrFile: '$(Build.BinariesDirectory)/netcoreapp/DevSkim_$(ReleaseVersion)'
        includeRootFolder: true
        archiveType: 'zip'
        archiveFile: '$(Build.StagingDirectory)/DevSkim_netcoreapp_$(ReleaseVersion).zip'
        replaceExistingArchive: true
    - task: PowerShell@2
      displayName: Move Nuget Package
      inputs:
        targetType: 'inline'
        script: 'mv $env:BUILD_BINARIESDIRECTORY/nuget/*.nupkg $env:BUILD_STAGINGDIRECTORY/'
    - task: PowerShell@2
      displayName: Generate Hashes
      inputs:
        targetType: 'inline'
        script: |
          Get-ChildItem $(Build.StagingDirectory) | Foreach-Object {
            $name = $_.Name
            $tmp = (Get-FileHash "$(Build.StagingDirectory)\$name").Hash
            Add-Content $(Build.StagingDirectory)\HASHES.txt "$tmp`t$name"
          }
    - task: PublishPipelineArtifact@1
      displayName: Publish Signed Artifacts to Pipeline
      inputs:
        targetPath: '$(Build.StagingDirectory)'
        artifact: 'Signed_Binaries'
    #- task: ** TODO: Publish linux release to GitHub
    #- task: ** TODO: Publish macos release to GitHub
    #- task: ** TODO: Publish windows release to GitHub
    #- task: ** TODO: Publish netcoreapp release to GitHub
    #- task: ** TODO: Publish nuget package release to NuGet.org