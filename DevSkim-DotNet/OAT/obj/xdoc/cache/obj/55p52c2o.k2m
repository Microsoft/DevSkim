id: OAT
language: CSharp
name:
  Default: OAT
qualifiedName:
  Default: OAT
type: Assembly
modifiers: {}
items:
- id: Microsoft.CST.OAT
  commentId: N:Microsoft.CST.OAT
  language: CSharp
  name:
    CSharp: Microsoft.CST.OAT
    VB: Microsoft.CST.OAT
  nameWithType:
    CSharp: Microsoft.CST.OAT
    VB: Microsoft.CST.OAT
  qualifiedName:
    CSharp: Microsoft.CST.OAT
    VB: Microsoft.CST.OAT
  type: Namespace
  assemblies:
  - OAT
  modifiers: {}
  items:
  - id: Microsoft.CST.OAT.Analyzer
    commentId: T:Microsoft.CST.OAT.Analyzer
    language: CSharp
    name:
      CSharp: Analyzer
      VB: Analyzer
    nameWithType:
      CSharp: Analyzer
      VB: Analyzer
    qualifiedName:
      CSharp: Microsoft.CST.OAT.Analyzer
      VB: Microsoft.CST.OAT.Analyzer
    type: Class
    assemblies:
    - OAT
    namespace: Microsoft.CST.OAT
    source:
      remote:
        path: OAT/Analyzer.cs
        branch: gfs/Documentation
        repo: https://github.com/microsoft/OAT.git
      id: Analyzer
      path: ../OAT/Analyzer.cs
      startLine: 18
    summary: "\nThis is the core engine of OAT\n"
    example: []
    syntax:
      content:
        CSharp: public class Analyzer
        VB: Public Class Analyzer
    inheritance:
    - System.Object
    inheritedMembers:
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.ToString
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Microsoft.CST.OAT.Analyzer.#ctor
      commentId: M:Microsoft.CST.OAT.Analyzer.#ctor
      language: CSharp
      name:
        CSharp: Analyzer()
        VB: Analyzer()
      nameWithType:
        CSharp: Analyzer.Analyzer()
        VB: Analyzer.Analyzer()
      qualifiedName:
        CSharp: Microsoft.CST.OAT.Analyzer.Analyzer()
        VB: Microsoft.CST.OAT.Analyzer.Analyzer()
      type: Constructor
      assemblies:
      - OAT
      namespace: Microsoft.CST.OAT
      source:
        remote:
          path: OAT/Analyzer.cs
          branch: gfs/Documentation
          repo: https://github.com/microsoft/OAT.git
        id: .ctor
        path: ../OAT/Analyzer.cs
        startLine: 25
      summary: "\nThe constructor for Analyzer takes no arguments.\n"
      example: []
      syntax:
        content:
          CSharp: public Analyzer()
          VB: Public Sub New
      overload: Microsoft.CST.OAT.Analyzer.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Microsoft.CST.OAT.Analyzer.CustomPropertyExtractionDelegates
      commentId: P:Microsoft.CST.OAT.Analyzer.CustomPropertyExtractionDelegates
      language: CSharp
      name:
        CSharp: CustomPropertyExtractionDelegates
        VB: CustomPropertyExtractionDelegates
      nameWithType:
        CSharp: Analyzer.CustomPropertyExtractionDelegates
        VB: Analyzer.CustomPropertyExtractionDelegates
      qualifiedName:
        CSharp: Microsoft.CST.OAT.Analyzer.CustomPropertyExtractionDelegates
        VB: Microsoft.CST.OAT.Analyzer.CustomPropertyExtractionDelegates
      type: Property
      assemblies:
      - OAT
      namespace: Microsoft.CST.OAT
      source:
        remote:
          path: OAT/Analyzer.cs
          branch: gfs/Documentation
          repo: https://github.com/microsoft/OAT.git
        id: CustomPropertyExtractionDelegates
        path: ../OAT/Analyzer.cs
        startLine: 66
      summary: "\nThe PropertyExtractionDelegates that will be used in order of attempt.  Once successful the others won&apos;t be run.\n"
      example: []
      syntax:
        content:
          CSharp: public List<Analyzer.PropertyExtractionDelegate> CustomPropertyExtractionDelegates { get; set; }
          VB: Public Property CustomPropertyExtractionDelegates As List(Of Analyzer.PropertyExtractionDelegate)
        parameters: []
        return:
          type: System.Collections.Generic.List{Microsoft.CST.OAT.Analyzer.PropertyExtractionDelegate}
      overload: Microsoft.CST.OAT.Analyzer.CustomPropertyExtractionDelegates*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Microsoft.CST.OAT.Analyzer.CustomObjectToValuesDelegates
      commentId: P:Microsoft.CST.OAT.Analyzer.CustomObjectToValuesDelegates
      language: CSharp
      name:
        CSharp: CustomObjectToValuesDelegates
        VB: CustomObjectToValuesDelegates
      nameWithType:
        CSharp: Analyzer.CustomObjectToValuesDelegates
        VB: Analyzer.CustomObjectToValuesDelegates
      qualifiedName:
        CSharp: Microsoft.CST.OAT.Analyzer.CustomObjectToValuesDelegates
        VB: Microsoft.CST.OAT.Analyzer.CustomObjectToValuesDelegates
      type: Property
      assemblies:
      - OAT
      namespace: Microsoft.CST.OAT
      source:
        remote:
          path: OAT/Analyzer.cs
          branch: gfs/Documentation
          repo: https://github.com/microsoft/OAT.git
        id: CustomObjectToValuesDelegates
        path: ../OAT/Analyzer.cs
        startLine: 71
      summary: "\nThe ObjectToValuesDelegates that will be used in order of attempt. Once successful the others won&apos;t be run.\n"
      example: []
      syntax:
        content:
          CSharp: public List<Analyzer.ObjectToValuesDelegate> CustomObjectToValuesDelegates { get; set; }
          VB: Public Property CustomObjectToValuesDelegates As List(Of Analyzer.ObjectToValuesDelegate)
        parameters: []
        return:
          type: System.Collections.Generic.List{Microsoft.CST.OAT.Analyzer.ObjectToValuesDelegate}
      overload: Microsoft.CST.OAT.Analyzer.CustomObjectToValuesDelegates*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Microsoft.CST.OAT.Analyzer.CustomOperationDelegates
      commentId: P:Microsoft.CST.OAT.Analyzer.CustomOperationDelegates
      language: CSharp
      name:
        CSharp: CustomOperationDelegates
        VB: CustomOperationDelegates
      nameWithType:
        CSharp: Analyzer.CustomOperationDelegates
        VB: Analyzer.CustomOperationDelegates
      qualifiedName:
        CSharp: Microsoft.CST.OAT.Analyzer.CustomOperationDelegates
        VB: Microsoft.CST.OAT.Analyzer.CustomOperationDelegates
      type: Property
      assemblies:
      - OAT
      namespace: Microsoft.CST.OAT
      source:
        remote:
          path: OAT/Analyzer.cs
          branch: gfs/Documentation
          repo: https://github.com/microsoft/OAT.git
        id: CustomOperationDelegates
        path: ../OAT/Analyzer.cs
        startLine: 76
      summary: "\nThe OperationDelegates that will be used in order of attempt.  Once successful the others won&apos;t be run.\n"
      example: []
      syntax:
        content:
          CSharp: public List<Analyzer.OperationDelegate> CustomOperationDelegates { get; set; }
          VB: Public Property CustomOperationDelegates As List(Of Analyzer.OperationDelegate)
        parameters: []
        return:
          type: System.Collections.Generic.List{Microsoft.CST.OAT.Analyzer.OperationDelegate}
      overload: Microsoft.CST.OAT.Analyzer.CustomOperationDelegates*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Microsoft.CST.OAT.Analyzer.CustomOperationValidationDelegates
      commentId: P:Microsoft.CST.OAT.Analyzer.CustomOperationValidationDelegates
      language: CSharp
      name:
        CSharp: CustomOperationValidationDelegates
        VB: CustomOperationValidationDelegates
      nameWithType:
        CSharp: Analyzer.CustomOperationValidationDelegates
        VB: Analyzer.CustomOperationValidationDelegates
      qualifiedName:
        CSharp: Microsoft.CST.OAT.Analyzer.CustomOperationValidationDelegates
        VB: Microsoft.CST.OAT.Analyzer.CustomOperationValidationDelegates
      type: Property
      assemblies:
      - OAT
      namespace: Microsoft.CST.OAT
      source:
        remote:
          path: OAT/Analyzer.cs
          branch: gfs/Documentation
          repo: https://github.com/microsoft/OAT.git
        id: CustomOperationValidationDelegates
        path: ../OAT/Analyzer.cs
        startLine: 81
      summary: "\nThe ValidationDelegates that will be used in order of attempt.  All will be run. Order not guaranteed.\n"
      example: []
      syntax:
        content:
          CSharp: public List<Analyzer.ValidationDelegate> CustomOperationValidationDelegates { get; set; }
          VB: Public Property CustomOperationValidationDelegates As List(Of Analyzer.ValidationDelegate)
        parameters: []
        return:
          type: System.Collections.Generic.List{Microsoft.CST.OAT.Analyzer.ValidationDelegate}
      overload: Microsoft.CST.OAT.Analyzer.CustomOperationValidationDelegates*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Microsoft.CST.OAT.Analyzer.GetValueByPropertyString(System.Object,System.String)
      commentId: M:Microsoft.CST.OAT.Analyzer.GetValueByPropertyString(System.Object,System.String)
      language: CSharp
      name:
        CSharp: GetValueByPropertyString(Object, String)
        VB: GetValueByPropertyString(Object, String)
      nameWithType:
        CSharp: Analyzer.GetValueByPropertyString(Object, String)
        VB: Analyzer.GetValueByPropertyString(Object, String)
      qualifiedName:
        CSharp: Microsoft.CST.OAT.Analyzer.GetValueByPropertyString(System.Object, System.String)
        VB: Microsoft.CST.OAT.Analyzer.GetValueByPropertyString(System.Object, System.String)
      type: Method
      assemblies:
      - OAT
      namespace: Microsoft.CST.OAT
      source:
        remote:
          path: OAT/Analyzer.cs
          branch: gfs/Documentation
          repo: https://github.com/microsoft/OAT.git
        id: GetValueByPropertyString
        path: ../OAT/Analyzer.cs
        startLine: 90
      summary: "\nExtracts a value stored at the specified path inside an object. Can crawl into Lists and\nDictionaries of strings and return any top-level object.\n"
      example: []
      syntax:
        content:
          CSharp: public object GetValueByPropertyString(object targetObject, string pathToProperty)
          VB: Public Function GetValueByPropertyString(targetObject As Object, pathToProperty As String) As Object
        parameters:
        - id: targetObject
          type: System.Object
          description: The object to parse
        - id: pathToProperty
          type: System.String
          description: The path of the property to fetch
        return:
          type: System.Object
          description: The object found
      overload: Microsoft.CST.OAT.Analyzer.GetValueByPropertyString*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Microsoft.CST.OAT.Analyzer.PrintViolations(System.Collections.Generic.IEnumerable{Microsoft.CST.OAT.Violation})
      commentId: M:Microsoft.CST.OAT.Analyzer.PrintViolations(System.Collections.Generic.IEnumerable{Microsoft.CST.OAT.Violation})
      language: CSharp
      name:
        CSharp: PrintViolations(IEnumerable<Violation>)
        VB: PrintViolations(IEnumerable(Of Violation))
      nameWithType:
        CSharp: Analyzer.PrintViolations(IEnumerable<Violation>)
        VB: Analyzer.PrintViolations(IEnumerable(Of Violation))
      qualifiedName:
        CSharp: Microsoft.CST.OAT.Analyzer.PrintViolations(System.Collections.Generic.IEnumerable<Microsoft.CST.OAT.Violation>)
        VB: Microsoft.CST.OAT.Analyzer.PrintViolations(System.Collections.Generic.IEnumerable(Of Microsoft.CST.OAT.Violation))
      type: Method
      assemblies:
      - OAT
      namespace: Microsoft.CST.OAT
      source:
        remote:
          path: OAT/Analyzer.cs
          branch: gfs/Documentation
          repo: https://github.com/microsoft/OAT.git
        id: PrintViolations
        path: ../OAT/Analyzer.cs
        startLine: 167
      summary: "\nPrints out the Enumerable of violations to Warning\n"
      example: []
      syntax:
        content:
          CSharp: public static void PrintViolations(IEnumerable<Violation> violations)
          VB: Public Shared Sub PrintViolations(violations As IEnumerable(Of Violation))
        parameters:
        - id: violations
          type: System.Collections.Generic.IEnumerable{Microsoft.CST.OAT.Violation}
          description: An Enumerable of Violations to print
      overload: Microsoft.CST.OAT.Analyzer.PrintViolations*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Microsoft.CST.OAT.Analyzer.GetTags(System.Collections.Generic.IEnumerable{Microsoft.CST.OAT.Rule},System.Object,System.Object)
      commentId: M:Microsoft.CST.OAT.Analyzer.GetTags(System.Collections.Generic.IEnumerable{Microsoft.CST.OAT.Rule},System.Object,System.Object)
      language: CSharp
      name:
        CSharp: GetTags(IEnumerable<Rule>, Object, Object)
        VB: GetTags(IEnumerable(Of Rule), Object, Object)
      nameWithType:
        CSharp: Analyzer.GetTags(IEnumerable<Rule>, Object, Object)
        VB: Analyzer.GetTags(IEnumerable(Of Rule), Object, Object)
      qualifiedName:
        CSharp: Microsoft.CST.OAT.Analyzer.GetTags(System.Collections.Generic.IEnumerable<Microsoft.CST.OAT.Rule>, System.Object, System.Object)
        VB: Microsoft.CST.OAT.Analyzer.GetTags(System.Collections.Generic.IEnumerable(Of Microsoft.CST.OAT.Rule), System.Object, System.Object)
      type: Method
      assemblies:
      - OAT
      namespace: Microsoft.CST.OAT
      source:
        remote:
          path: OAT/Analyzer.cs
          branch: gfs/Documentation
          repo: https://github.com/microsoft/OAT.git
        id: GetTags
        path: ../OAT/Analyzer.cs
        startLine: 183
      summary: "\nGet the Tags which apply to the object given the Rules\n"
      example: []
      syntax:
        content:
          CSharp: public string[] GetTags(IEnumerable<Rule> rules, object state1 = null, object state2 = null)
          VB: Public Function GetTags(rules As IEnumerable(Of Rule), state1 As Object = Nothing, state2 As Object = Nothing) As String()
        parameters:
        - id: rules
          type: System.Collections.Generic.IEnumerable{Microsoft.CST.OAT.Rule}
          description: The Rules to apply
        - id: state1
          type: System.Object
          description: The first state of the object
        - id: state2
          type: System.Object
          description: The second state of the object
        return:
          type: System.String[]
          description: ''
      overload: Microsoft.CST.OAT.Analyzer.GetTags*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Microsoft.CST.OAT.Analyzer.Analyze(System.Collections.Generic.IEnumerable{Microsoft.CST.OAT.Rule},System.Object,System.Object)
      commentId: M:Microsoft.CST.OAT.Analyzer.Analyze(System.Collections.Generic.IEnumerable{Microsoft.CST.OAT.Rule},System.Object,System.Object)
      language: CSharp
      name:
        CSharp: Analyze(IEnumerable<Rule>, Object, Object)
        VB: Analyze(IEnumerable(Of Rule), Object, Object)
      nameWithType:
        CSharp: Analyzer.Analyze(IEnumerable<Rule>, Object, Object)
        VB: Analyzer.Analyze(IEnumerable(Of Rule), Object, Object)
      qualifiedName:
        CSharp: Microsoft.CST.OAT.Analyzer.Analyze(System.Collections.Generic.IEnumerable<Microsoft.CST.OAT.Rule>, System.Object, System.Object)
        VB: Microsoft.CST.OAT.Analyzer.Analyze(System.Collections.Generic.IEnumerable(Of Microsoft.CST.OAT.Rule), System.Object, System.Object)
      type: Method
      assemblies:
      - OAT
      namespace: Microsoft.CST.OAT
      source:
        remote:
          path: OAT/Analyzer.cs
          branch: gfs/Documentation
          repo: https://github.com/microsoft/OAT.git
        id: Analyze
        path: ../OAT/Analyzer.cs
        startLine: 208
      summary: "\nWhich rules apply to this object given up to two states?\n"
      example: []
      syntax:
        content:
          CSharp: public ConcurrentStack<Rule> Analyze(IEnumerable<Rule> rules, object state1 = null, object state2 = null)
          VB: Public Function Analyze(rules As IEnumerable(Of Rule), state1 As Object = Nothing, state2 As Object = Nothing) As ConcurrentStack(Of Rule)
        parameters:
        - id: rules
          type: System.Collections.Generic.IEnumerable{Microsoft.CST.OAT.Rule}
          description: The rules to apply
        - id: state1
          type: System.Object
          description: The first state
        - id: state2
          type: System.Object
          description: The second state
        return:
          type: System.Collections.Concurrent.ConcurrentStack{Microsoft.CST.OAT.Rule}
          description: A Stack of Rules which apply
      overload: Microsoft.CST.OAT.Analyzer.Analyze*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Microsoft.CST.OAT.Analyzer.Applies(Microsoft.CST.OAT.Rule,System.Object,System.Object)
      commentId: M:Microsoft.CST.OAT.Analyzer.Applies(Microsoft.CST.OAT.Rule,System.Object,System.Object)
      language: CSharp
      name:
        CSharp: Applies(Rule, Object, Object)
        VB: Applies(Rule, Object, Object)
      nameWithType:
        CSharp: Analyzer.Applies(Rule, Object, Object)
        VB: Analyzer.Applies(Rule, Object, Object)
      qualifiedName:
        CSharp: Microsoft.CST.OAT.Analyzer.Applies(Microsoft.CST.OAT.Rule, System.Object, System.Object)
        VB: Microsoft.CST.OAT.Analyzer.Applies(Microsoft.CST.OAT.Rule, System.Object, System.Object)
      type: Method
      assemblies:
      - OAT
      namespace: Microsoft.CST.OAT
      source:
        remote:
          path: OAT/Analyzer.cs
          branch: gfs/Documentation
          repo: https://github.com/microsoft/OAT.git
        id: Applies
        path: ../OAT/Analyzer.cs
        startLine: 230
      summary: "\nDoes the rule apply to the object?\n"
      example: []
      syntax:
        content:
          CSharp: public bool Applies(Rule rule, object state1 = null, object state2 = null)
          VB: Public Function Applies(rule As Rule, state1 As Object = Nothing, state2 As Object = Nothing) As Boolean
        parameters:
        - id: rule
          type: Microsoft.CST.OAT.Rule
          description: The Rule to apply
        - id: state1
          type: System.Object
          description: The first state of the object
        - id: state2
          type: System.Object
          description: The second state of the object
        return:
          type: System.Boolean
          description: True if the rule applies
      overload: Microsoft.CST.OAT.Analyzer.Applies*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Microsoft.CST.OAT.Analyzer.IsRuleValid(Microsoft.CST.OAT.Rule)
      commentId: M:Microsoft.CST.OAT.Analyzer.IsRuleValid(Microsoft.CST.OAT.Rule)
      language: CSharp
      name:
        CSharp: IsRuleValid(Rule)
        VB: IsRuleValid(Rule)
      nameWithType:
        CSharp: Analyzer.IsRuleValid(Rule)
        VB: Analyzer.IsRuleValid(Rule)
      qualifiedName:
        CSharp: Microsoft.CST.OAT.Analyzer.IsRuleValid(Microsoft.CST.OAT.Rule)
        VB: Microsoft.CST.OAT.Analyzer.IsRuleValid(Microsoft.CST.OAT.Rule)
      type: Method
      assemblies:
      - OAT
      namespace: Microsoft.CST.OAT
      source:
        remote:
          path: OAT/Analyzer.cs
          branch: gfs/Documentation
          repo: https://github.com/microsoft/OAT.git
        id: IsRuleValid
        path: ../OAT/Analyzer.cs
        startLine: 272
      summary: "\nDetermines if there are any problems with the provided rule.\n"
      example: []
      syntax:
        content:
          CSharp: public bool IsRuleValid(Rule rule)
          VB: Public Function IsRuleValid(rule As Rule) As Boolean
        parameters:
        - id: rule
          type: Microsoft.CST.OAT.Rule
          description: The rule to parse.
        return:
          type: System.Boolean
          description: True if there are no issues.
      overload: Microsoft.CST.OAT.Analyzer.IsRuleValid*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Microsoft.CST.OAT.Analyzer.EnumerateRuleIssues(System.Collections.Generic.IEnumerable{Microsoft.CST.OAT.Rule})
      commentId: M:Microsoft.CST.OAT.Analyzer.EnumerateRuleIssues(System.Collections.Generic.IEnumerable{Microsoft.CST.OAT.Rule})
      language: CSharp
      name:
        CSharp: EnumerateRuleIssues(IEnumerable<Rule>)
        VB: EnumerateRuleIssues(IEnumerable(Of Rule))
      nameWithType:
        CSharp: Analyzer.EnumerateRuleIssues(IEnumerable<Rule>)
        VB: Analyzer.EnumerateRuleIssues(IEnumerable(Of Rule))
      qualifiedName:
        CSharp: Microsoft.CST.OAT.Analyzer.EnumerateRuleIssues(System.Collections.Generic.IEnumerable<Microsoft.CST.OAT.Rule>)
        VB: Microsoft.CST.OAT.Analyzer.EnumerateRuleIssues(System.Collections.Generic.IEnumerable(Of Microsoft.CST.OAT.Rule))
      type: Method
      assemblies:
      - OAT
      namespace: Microsoft.CST.OAT
      source:
        remote:
          path: OAT/Analyzer.cs
          branch: gfs/Documentation
          repo: https://github.com/microsoft/OAT.git
        id: EnumerateRuleIssues
        path: ../OAT/Analyzer.cs
        startLine: 279
      summary: "\nVerifies the provided rules and provides a list of issues with the rules.\n"
      example: []
      syntax:
        content:
          CSharp: public IEnumerable<Violation> EnumerateRuleIssues(IEnumerable<Rule> rules)
          VB: Public Function EnumerateRuleIssues(rules As IEnumerable(Of Rule)) As IEnumerable(Of Violation)
        parameters:
        - id: rules
          type: System.Collections.Generic.IEnumerable{Microsoft.CST.OAT.Rule}
          description: Enumerable of Rules.
        return:
          type: System.Collections.Generic.IEnumerable{Microsoft.CST.OAT.Violation}
          description: Enumerable of issues with the rules.
      overload: Microsoft.CST.OAT.Analyzer.EnumerateRuleIssues*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Microsoft.CST.OAT.Analyzer.AnalyzeClause(Microsoft.CST.OAT.Clause,System.Object,System.Object)
      commentId: M:Microsoft.CST.OAT.Analyzer.AnalyzeClause(Microsoft.CST.OAT.Clause,System.Object,System.Object)
      language: CSharp
      name:
        CSharp: AnalyzeClause(Clause, Object, Object)
        VB: AnalyzeClause(Clause, Object, Object)
      nameWithType:
        CSharp: Analyzer.AnalyzeClause(Clause, Object, Object)
        VB: Analyzer.AnalyzeClause(Clause, Object, Object)
      qualifiedName:
        CSharp: Microsoft.CST.OAT.Analyzer.AnalyzeClause(Microsoft.CST.OAT.Clause, System.Object, System.Object)
        VB: Microsoft.CST.OAT.Analyzer.AnalyzeClause(Microsoft.CST.OAT.Clause, System.Object, System.Object)
      type: Method
      assemblies:
      - OAT
      namespace: Microsoft.CST.OAT
      source:
        remote:
          path: OAT/Analyzer.cs
          branch: gfs/Documentation
          repo: https://github.com/microsoft/OAT.git
        id: AnalyzeClause
        path: ../OAT/Analyzer.cs
        startLine: 595
      summary: "\nDetermine if a Clause is true or false\n"
      example: []
      syntax:
        content:
          CSharp: public bool AnalyzeClause(Clause clause, object state1 = null, object state2 = null)
          VB: Public Function AnalyzeClause(clause As Clause, state1 As Object = Nothing, state2 As Object = Nothing) As Boolean
        parameters:
        - id: clause
          type: Microsoft.CST.OAT.Clause
          description: The Clause to Analyze
        - id: state1
          type: System.Object
          description: The first object state
        - id: state2
          type: System.Object
          description: The second object state
        return:
          type: System.Boolean
          description: If the Clause is true
      overload: Microsoft.CST.OAT.Analyzer.AnalyzeClause*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Microsoft.CST.OAT.Analyzer.GetValueByPropertyOrFieldName(System.Object,System.String)
      commentId: M:Microsoft.CST.OAT.Analyzer.GetValueByPropertyOrFieldName(System.Object,System.String)
      language: CSharp
      name:
        CSharp: GetValueByPropertyOrFieldName(Object, String)
        VB: GetValueByPropertyOrFieldName(Object, String)
      nameWithType:
        CSharp: Analyzer.GetValueByPropertyOrFieldName(Object, String)
        VB: Analyzer.GetValueByPropertyOrFieldName(Object, String)
      qualifiedName:
        CSharp: Microsoft.CST.OAT.Analyzer.GetValueByPropertyOrFieldName(System.Object, System.String)
        VB: Microsoft.CST.OAT.Analyzer.GetValueByPropertyOrFieldName(System.Object, System.String)
      type: Method
      assemblies:
      - OAT
      namespace: Microsoft.CST.OAT
      source:
        remote:
          path: OAT/Analyzer.cs
          branch: gfs/Documentation
          repo: https://github.com/microsoft/OAT.git
        id: GetValueByPropertyOrFieldName
        path: ../OAT/Analyzer.cs
        startLine: 974
      summary: "\nGets the object value stored at the field or property named by the string. Property tried first.  Returns null if none found.\n"
      example: []
      syntax:
        content:
          CSharp: public static object GetValueByPropertyOrFieldName(object obj, string propertyName)
          VB: Public Shared Function GetValueByPropertyOrFieldName(obj As Object, propertyName As String) As Object
        parameters:
        - id: obj
          type: System.Object
          description: The target object
        - id: propertyName
          type: System.String
          description: The Property or Field name
        return:
          type: System.Object
          description: The object at that Name or null
      overload: Microsoft.CST.OAT.Analyzer.GetValueByPropertyOrFieldName*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Microsoft.CST.OAT.Analyzer.TryShortcut(System.Boolean,Microsoft.CST.OAT.BOOL_OPERATOR)
      commentId: M:Microsoft.CST.OAT.Analyzer.TryShortcut(System.Boolean,Microsoft.CST.OAT.BOOL_OPERATOR)
      language: CSharp
      name:
        CSharp: TryShortcut(Boolean, BOOL_OPERATOR)
        VB: TryShortcut(Boolean, BOOL_OPERATOR)
      nameWithType:
        CSharp: Analyzer.TryShortcut(Boolean, BOOL_OPERATOR)
        VB: Analyzer.TryShortcut(Boolean, BOOL_OPERATOR)
      qualifiedName:
        CSharp: Microsoft.CST.OAT.Analyzer.TryShortcut(System.Boolean, Microsoft.CST.OAT.BOOL_OPERATOR)
        VB: Microsoft.CST.OAT.Analyzer.TryShortcut(System.Boolean, Microsoft.CST.OAT.BOOL_OPERATOR)
      type: Method
      assemblies:
      - OAT
      namespace: Microsoft.CST.OAT
      source:
        remote:
          path: OAT/Analyzer.cs
          branch: gfs/Documentation
          repo: https://github.com/microsoft/OAT.git
        id: TryShortcut
        path: ../OAT/Analyzer.cs
        startLine: 1169
      summary: "\nTry to shortcut a boolean operation\n"
      example: []
      syntax:
        content:
          CSharp: public static (bool CanShortcut, bool Value) TryShortcut(bool current, BOOL_OPERATOR operation)
          VB: Public Shared Function TryShortcut(current As Boolean, operation As BOOL_OPERATOR) As(CanShortcut As Boolean, Value As Boolean)
        parameters:
        - id: current
          type: System.Boolean
          description: The current boolean state
        - id: operation
          type: Microsoft.CST.OAT.BOOL_OPERATOR
          description: The Operation
        return:
          type: System.ValueTuple{System.Boolean,System.Boolean}
          description: (If you can use a shortcut, the result of the shortcut)
      overload: Microsoft.CST.OAT.Analyzer.TryShortcut*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
  - id: Microsoft.CST.OAT.Analyzer.PropertyExtractionDelegate
    commentId: T:Microsoft.CST.OAT.Analyzer.PropertyExtractionDelegate
    language: CSharp
    name:
      CSharp: Analyzer.PropertyExtractionDelegate
      VB: Analyzer.PropertyExtractionDelegate
    nameWithType:
      CSharp: Analyzer.PropertyExtractionDelegate
      VB: Analyzer.PropertyExtractionDelegate
    qualifiedName:
      CSharp: Microsoft.CST.OAT.Analyzer.PropertyExtractionDelegate
      VB: Microsoft.CST.OAT.Analyzer.PropertyExtractionDelegate
    type: Delegate
    assemblies:
    - OAT
    namespace: Microsoft.CST.OAT
    source:
      remote:
        path: OAT/Analyzer.cs
        branch: gfs/Documentation
        repo: https://github.com/microsoft/OAT.git
      id: PropertyExtractionDelegate
      path: ../OAT/Analyzer.cs
      startLine: 35
    summary: "\nThis delegate is for iterating into complex objects like dictionaries that the Analyzer doesn&apos;t natively understand\n"
    example: []
    syntax:
      content:
        CSharp: public delegate (bool Processed, object Result) PropertyExtractionDelegate(object obj, string index);
        VB: Public Delegate Function PropertyExtractionDelegate(obj As Object, index As String) As(Processed As Boolean, Result As Object)
      parameters:
      - id: obj
        type: System.Object
        description: Target object
      - id: index
        type: System.String
        description: String based index into the object
      return:
        type: System.ValueTuple{System.Boolean,System.Object}
        description: (If we successfully extracted, The extraction result)
    modifiers:
      CSharp:
      - public
      - delegate
      VB:
      - Public
      - Delegate
    items: []
  - id: Microsoft.CST.OAT.Analyzer.ObjectToValuesDelegate
    commentId: T:Microsoft.CST.OAT.Analyzer.ObjectToValuesDelegate
    language: CSharp
    name:
      CSharp: Analyzer.ObjectToValuesDelegate
      VB: Analyzer.ObjectToValuesDelegate
    nameWithType:
      CSharp: Analyzer.ObjectToValuesDelegate
      VB: Analyzer.ObjectToValuesDelegate
    qualifiedName:
      CSharp: Microsoft.CST.OAT.Analyzer.ObjectToValuesDelegate
      VB: Microsoft.CST.OAT.Analyzer.ObjectToValuesDelegate
    type: Delegate
    assemblies:
    - OAT
    namespace: Microsoft.CST.OAT
    source:
      remote:
        path: OAT/Analyzer.cs
        branch: gfs/Documentation
        repo: https://github.com/microsoft/OAT.git
      id: ObjectToValuesDelegate
      path: ../OAT/Analyzer.cs
      startLine: 42
    summary: "\nThis delegate is for turning complex objects like dictionaries that the Analyzer doesn&apos;t natively support into a dictionary or list of strings that OAT can use for default operations\n"
    example: []
    syntax:
      content:
        CSharp: public delegate (bool Processed, IEnumerable<string> valsExtracted, IEnumerable<KeyValuePair<string, string>> dictExtracted) ObjectToValuesDelegate(object obj);
        VB: Public Delegate Function ObjectToValuesDelegate(obj As Object) As(Processed As Boolean, valsExtracted As IEnumerable(Of String), dictExtracted As IEnumerable(Of KeyValuePair(Of String, String)))
      parameters:
      - id: obj
        type: System.Object
        description: Target object
      return:
        type: System.ValueTuple{System.Boolean,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}}}
        description: (If the object was parsed, A list of Strings that were extracted, A List of KVP that were extracted)
    modifiers:
      CSharp:
      - public
      - delegate
      VB:
      - Public
      - Delegate
    items: []
  - id: Microsoft.CST.OAT.Analyzer.OperationDelegate
    commentId: T:Microsoft.CST.OAT.Analyzer.OperationDelegate
    language: CSharp
    name:
      CSharp: Analyzer.OperationDelegate
      VB: Analyzer.OperationDelegate
    nameWithType:
      CSharp: Analyzer.OperationDelegate
      VB: Analyzer.OperationDelegate
    qualifiedName:
      CSharp: Microsoft.CST.OAT.Analyzer.OperationDelegate
      VB: Microsoft.CST.OAT.Analyzer.OperationDelegate
    type: Delegate
    assemblies:
    - OAT
    namespace: Microsoft.CST.OAT
    source:
      remote:
        path: OAT/Analyzer.cs
        branch: gfs/Documentation
        repo: https://github.com/microsoft/OAT.git
      id: OperationDelegate
      path: ../OAT/Analyzer.cs
      startLine: 53
    summary: "\nThis delegate allows extending the Analyzer with a custom operation.\n"
    example: []
    syntax:
      content:
        CSharp: public delegate (bool Applies, bool Result) OperationDelegate(Clause clause, IEnumerable<string> valsToCheck, IEnumerable<KeyValuePair<string, string>> dictToCheck, object state1, object state2);
        VB: Public Delegate Function OperationDelegate(clause As Clause, valsToCheck As IEnumerable(Of String), dictToCheck As IEnumerable(Of KeyValuePair(Of String, String)), state1 As Object, state2 As Object) As(Applies As Boolean, Result As Boolean)
      parameters:
      - id: clause
        type: Microsoft.CST.OAT.Clause
        description: The clause being applied
      - id: valsToCheck
        type: System.Collections.Generic.IEnumerable{System.String}
        description: The list of strings that have been extracted
      - id: dictToCheck
        type: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}}
        description: The list of KVP of strings that have been extracted
      - id: state1
        type: System.Object
        description: The first object state
      - id: state2
        type: System.Object
        description: The second object state
      return:
        type: System.ValueTuple{System.Boolean,System.Boolean}
        description: (If the Operation delegate applies to the clause, If the operation was successful)
    modifiers:
      CSharp:
      - public
      - delegate
      VB:
      - Public
      - Delegate
    items: []
  - id: Microsoft.CST.OAT.Analyzer.ValidationDelegate
    commentId: T:Microsoft.CST.OAT.Analyzer.ValidationDelegate
    language: CSharp
    name:
      CSharp: Analyzer.ValidationDelegate
      VB: Analyzer.ValidationDelegate
    nameWithType:
      CSharp: Analyzer.ValidationDelegate
      VB: Analyzer.ValidationDelegate
    qualifiedName:
      CSharp: Microsoft.CST.OAT.Analyzer.ValidationDelegate
      VB: Microsoft.CST.OAT.Analyzer.ValidationDelegate
    type: Delegate
    assemblies:
    - OAT
    namespace: Microsoft.CST.OAT
    source:
      remote:
        path: OAT/Analyzer.cs
        branch: gfs/Documentation
        repo: https://github.com/microsoft/OAT.git
      id: ValidationDelegate
      path: ../OAT/Analyzer.cs
      startLine: 61
    summary: "\nThis delegate allows extending the Analyzer with extra rule validation for custom rules.\n"
    example: []
    syntax:
      content:
        CSharp: public delegate (bool Applies, IEnumerable<Violation> FoundViolations) ValidationDelegate(Rule r, Clause c);
        VB: Public Delegate Function ValidationDelegate(r As Rule, c As Clause) As(Applies As Boolean, FoundViolations As IEnumerable(Of Violation))
      parameters:
      - id: r
        type: Microsoft.CST.OAT.Rule
        description: The Target Rule
      - id: c
        type: Microsoft.CST.OAT.Clause
        description: The Target Clause
      return:
        type: System.ValueTuple{System.Boolean,System.Collections.Generic.IEnumerable{Microsoft.CST.OAT.Violation}}
        description: (If the validation applied, The Enumerable of Violations found)
    modifiers:
      CSharp:
      - public
      - delegate
      VB:
      - Public
      - Delegate
    items: []
  - id: Microsoft.CST.OAT.BOOL_OPERATOR
    commentId: T:Microsoft.CST.OAT.BOOL_OPERATOR
    language: CSharp
    name:
      CSharp: BOOL_OPERATOR
      VB: BOOL_OPERATOR
    nameWithType:
      CSharp: BOOL_OPERATOR
      VB: BOOL_OPERATOR
    qualifiedName:
      CSharp: Microsoft.CST.OAT.BOOL_OPERATOR
      VB: Microsoft.CST.OAT.BOOL_OPERATOR
    type: Enum
    assemblies:
    - OAT
    namespace: Microsoft.CST.OAT
    source:
      remote:
        path: OAT/BoolOperator.cs
        branch: gfs/Documentation
        repo: https://github.com/microsoft/OAT.git
      id: BOOL_OPERATOR
      path: ../OAT/BoolOperator.cs
      startLine: 5
    summary: "\nThe boolean operators supported by the Analyzer.\n"
    example: []
    syntax:
      content:
        CSharp: public enum BOOL_OPERATOR
        VB: Public Enum BOOL_OPERATOR
    modifiers:
      CSharp:
      - public
      - enum
      VB:
      - Public
      - Enum
    items:
    - id: Microsoft.CST.OAT.BOOL_OPERATOR.AND
      commentId: F:Microsoft.CST.OAT.BOOL_OPERATOR.AND
      language: CSharp
      name:
        CSharp: AND
        VB: AND
      nameWithType:
        CSharp: BOOL_OPERATOR.AND
        VB: BOOL_OPERATOR.AND
      qualifiedName:
        CSharp: Microsoft.CST.OAT.BOOL_OPERATOR.AND
        VB: Microsoft.CST.OAT.BOOL_OPERATOR.AND
      type: Field
      assemblies:
      - OAT
      namespace: Microsoft.CST.OAT
      source:
        remote:
          path: OAT/BoolOperator.cs
          branch: gfs/Documentation
          repo: https://github.com/microsoft/OAT.git
        id: AND
        path: ../OAT/BoolOperator.cs
        startLine: 10
      summary: "\nLogical and\n"
      example: []
      syntax:
        content:
          CSharp: AND = 0
          VB: AND = 0
        return:
          type: Microsoft.CST.OAT.BOOL_OPERATOR
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Microsoft.CST.OAT.BOOL_OPERATOR.OR
      commentId: F:Microsoft.CST.OAT.BOOL_OPERATOR.OR
      language: CSharp
      name:
        CSharp: OR
        VB: OR
      nameWithType:
        CSharp: BOOL_OPERATOR.OR
        VB: BOOL_OPERATOR.OR
      qualifiedName:
        CSharp: Microsoft.CST.OAT.BOOL_OPERATOR.OR
        VB: Microsoft.CST.OAT.BOOL_OPERATOR.OR
      type: Field
      assemblies:
      - OAT
      namespace: Microsoft.CST.OAT
      source:
        remote:
          path: OAT/BoolOperator.cs
          branch: gfs/Documentation
          repo: https://github.com/microsoft/OAT.git
        id: OR
        path: ../OAT/BoolOperator.cs
        startLine: 14
      summary: "\nLogical or\n"
      example: []
      syntax:
        content:
          CSharp: OR = 1
          VB: OR = 1
        return:
          type: Microsoft.CST.OAT.BOOL_OPERATOR
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Microsoft.CST.OAT.BOOL_OPERATOR.XOR
      commentId: F:Microsoft.CST.OAT.BOOL_OPERATOR.XOR
      language: CSharp
      name:
        CSharp: XOR
        VB: XOR
      nameWithType:
        CSharp: BOOL_OPERATOR.XOR
        VB: BOOL_OPERATOR.XOR
      qualifiedName:
        CSharp: Microsoft.CST.OAT.BOOL_OPERATOR.XOR
        VB: Microsoft.CST.OAT.BOOL_OPERATOR.XOR
      type: Field
      assemblies:
      - OAT
      namespace: Microsoft.CST.OAT
      source:
        remote:
          path: OAT/BoolOperator.cs
          branch: gfs/Documentation
          repo: https://github.com/microsoft/OAT.git
        id: XOR
        path: ../OAT/BoolOperator.cs
        startLine: 18
      summary: "\nLogical xor\n"
      example: []
      syntax:
        content:
          CSharp: XOR = 2
          VB: XOR = 2
        return:
          type: Microsoft.CST.OAT.BOOL_OPERATOR
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Microsoft.CST.OAT.BOOL_OPERATOR.NAND
      commentId: F:Microsoft.CST.OAT.BOOL_OPERATOR.NAND
      language: CSharp
      name:
        CSharp: NAND
        VB: NAND
      nameWithType:
        CSharp: BOOL_OPERATOR.NAND
        VB: BOOL_OPERATOR.NAND
      qualifiedName:
        CSharp: Microsoft.CST.OAT.BOOL_OPERATOR.NAND
        VB: Microsoft.CST.OAT.BOOL_OPERATOR.NAND
      type: Field
      assemblies:
      - OAT
      namespace: Microsoft.CST.OAT
      source:
        remote:
          path: OAT/BoolOperator.cs
          branch: gfs/Documentation
          repo: https://github.com/microsoft/OAT.git
        id: NAND
        path: ../OAT/BoolOperator.cs
        startLine: 22
      summary: "\nLogical not and\n"
      example: []
      syntax:
        content:
          CSharp: NAND = 3
          VB: NAND = 3
        return:
          type: Microsoft.CST.OAT.BOOL_OPERATOR
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Microsoft.CST.OAT.BOOL_OPERATOR.NOR
      commentId: F:Microsoft.CST.OAT.BOOL_OPERATOR.NOR
      language: CSharp
      name:
        CSharp: NOR
        VB: NOR
      nameWithType:
        CSharp: BOOL_OPERATOR.NOR
        VB: BOOL_OPERATOR.NOR
      qualifiedName:
        CSharp: Microsoft.CST.OAT.BOOL_OPERATOR.NOR
        VB: Microsoft.CST.OAT.BOOL_OPERATOR.NOR
      type: Field
      assemblies:
      - OAT
      namespace: Microsoft.CST.OAT
      source:
        remote:
          path: OAT/BoolOperator.cs
          branch: gfs/Documentation
          repo: https://github.com/microsoft/OAT.git
        id: NOR
        path: ../OAT/BoolOperator.cs
        startLine: 26
      summary: "\nLogical not or\n"
      example: []
      syntax:
        content:
          CSharp: NOR = 4
          VB: NOR = 4
        return:
          type: Microsoft.CST.OAT.BOOL_OPERATOR
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Microsoft.CST.OAT.BOOL_OPERATOR.NOT
      commentId: F:Microsoft.CST.OAT.BOOL_OPERATOR.NOT
      language: CSharp
      name:
        CSharp: NOT
        VB: NOT
      nameWithType:
        CSharp: BOOL_OPERATOR.NOT
        VB: BOOL_OPERATOR.NOT
      qualifiedName:
        CSharp: Microsoft.CST.OAT.BOOL_OPERATOR.NOT
        VB: Microsoft.CST.OAT.BOOL_OPERATOR.NOT
      type: Field
      assemblies:
      - OAT
      namespace: Microsoft.CST.OAT
      source:
        remote:
          path: OAT/BoolOperator.cs
          branch: gfs/Documentation
          repo: https://github.com/microsoft/OAT.git
        id: NOT
        path: ../OAT/BoolOperator.cs
        startLine: 30
      summary: "\nLogical not\n"
      example: []
      syntax:
        content:
          CSharp: NOT = 5
          VB: NOT = 5
        return:
          type: Microsoft.CST.OAT.BOOL_OPERATOR
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
  - id: Microsoft.CST.OAT.Clause
    commentId: T:Microsoft.CST.OAT.Clause
    language: CSharp
    name:
      CSharp: Clause
      VB: Clause
    nameWithType:
      CSharp: Clause
      VB: Clause
    qualifiedName:
      CSharp: Microsoft.CST.OAT.Clause
      VB: Microsoft.CST.OAT.Clause
    type: Class
    assemblies:
    - OAT
    namespace: Microsoft.CST.OAT
    source:
      remote:
        path: OAT/Clause.cs
        branch: gfs/Documentation
        repo: https://github.com/microsoft/OAT.git
      id: Clause
      path: ../OAT/Clause.cs
      startLine: 8
    summary: "\nClauses contain an Operation and associated data\n"
    example: []
    syntax:
      content:
        CSharp: public class Clause
        VB: Public Class Clause
    inheritance:
    - System.Object
    inheritedMembers:
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.ToString
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Microsoft.CST.OAT.Clause.#ctor(Microsoft.CST.OAT.OPERATION,System.String)
      commentId: M:Microsoft.CST.OAT.Clause.#ctor(Microsoft.CST.OAT.OPERATION,System.String)
      language: CSharp
      name:
        CSharp: Clause(OPERATION, String)
        VB: Clause(OPERATION, String)
      nameWithType:
        CSharp: Clause.Clause(OPERATION, String)
        VB: Clause.Clause(OPERATION, String)
      qualifiedName:
        CSharp: Microsoft.CST.OAT.Clause.Clause(Microsoft.CST.OAT.OPERATION, System.String)
        VB: Microsoft.CST.OAT.Clause.Clause(Microsoft.CST.OAT.OPERATION, System.String)
      type: Constructor
      assemblies:
      - OAT
      namespace: Microsoft.CST.OAT
      source:
        remote:
          path: OAT/Clause.cs
          branch: gfs/Documentation
          repo: https://github.com/microsoft/OAT.git
        id: .ctor
        path: ../OAT/Clause.cs
        startLine: 15
      summary: "\nCreate a Clause\n"
      example: []
      syntax:
        content:
          CSharp: public Clause(OPERATION Operation, string field = null)
          VB: Public Sub New(Operation As OPERATION, field As String = Nothing)
        parameters:
        - id: Operation
          type: Microsoft.CST.OAT.OPERATION
          description: The Operation to Perform
        - id: field
          type: System.String
          description: Optionally, the path to the field to operate on
      overload: Microsoft.CST.OAT.Clause.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Microsoft.CST.OAT.Clause.Data
      commentId: P:Microsoft.CST.OAT.Clause.Data
      language: CSharp
      name:
        CSharp: Data
        VB: Data
      nameWithType:
        CSharp: Clause.Data
        VB: Clause.Data
      qualifiedName:
        CSharp: Microsoft.CST.OAT.Clause.Data
        VB: Microsoft.CST.OAT.Clause.Data
      type: Property
      assemblies:
      - OAT
      namespace: Microsoft.CST.OAT
      source:
        remote:
          path: OAT/Clause.cs
          branch: gfs/Documentation
          repo: https://github.com/microsoft/OAT.git
        id: Data
        path: ../OAT/Clause.cs
        startLine: 23
      summary: "\nA list of strings passed to the operation\n"
      example: []
      syntax:
        content:
          CSharp: public List<string> Data { get; set; }
          VB: Public Property Data As List(Of String)
        parameters: []
        return:
          type: System.Collections.Generic.List{System.String}
      overload: Microsoft.CST.OAT.Clause.Data*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Microsoft.CST.OAT.Clause.DictData
      commentId: P:Microsoft.CST.OAT.Clause.DictData
      language: CSharp
      name:
        CSharp: DictData
        VB: DictData
      nameWithType:
        CSharp: Clause.DictData
        VB: Clause.DictData
      qualifiedName:
        CSharp: Microsoft.CST.OAT.Clause.DictData
        VB: Microsoft.CST.OAT.Clause.DictData
      type: Property
      assemblies:
      - OAT
      namespace: Microsoft.CST.OAT
      source:
        remote:
          path: OAT/Clause.cs
          branch: gfs/Documentation
          repo: https://github.com/microsoft/OAT.git
        id: DictData
        path: ../OAT/Clause.cs
        startLine: 27
      summary: "\nA dictionary of strings passed to the operation\n"
      example: []
      syntax:
        content:
          CSharp: public List<KeyValuePair<string, string>> DictData { get; set; }
          VB: Public Property DictData As List(Of KeyValuePair(Of String, String))
        parameters: []
        return:
          type: System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}}
      overload: Microsoft.CST.OAT.Clause.DictData*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Microsoft.CST.OAT.Clause.Field
      commentId: P:Microsoft.CST.OAT.Clause.Field
      language: CSharp
      name:
        CSharp: Field
        VB: Field
      nameWithType:
        CSharp: Clause.Field
        VB: Clause.Field
      qualifiedName:
        CSharp: Microsoft.CST.OAT.Clause.Field
        VB: Microsoft.CST.OAT.Clause.Field
      type: Property
      assemblies:
      - OAT
      namespace: Microsoft.CST.OAT
      source:
        remote:
          path: OAT/Clause.cs
          branch: gfs/Documentation
          repo: https://github.com/microsoft/OAT.git
        id: Field
        path: ../OAT/Clause.cs
        startLine: 33
      summary: "\nWhich field or property of the Target should this Clause apply to?\n\nnull is wildcard\n"
      example: []
      syntax:
        content:
          CSharp: public string Field { get; set; }
          VB: Public Property Field As String
        parameters: []
        return:
          type: System.String
      overload: Microsoft.CST.OAT.Clause.Field*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Microsoft.CST.OAT.Clause.Label
      commentId: P:Microsoft.CST.OAT.Clause.Label
      language: CSharp
      name:
        CSharp: Label
        VB: Label
      nameWithType:
        CSharp: Clause.Label
        VB: Clause.Label
      qualifiedName:
        CSharp: Microsoft.CST.OAT.Clause.Label
        VB: Microsoft.CST.OAT.Clause.Label
      type: Property
      assemblies:
      - OAT
      namespace: Microsoft.CST.OAT
      source:
        remote:
          path: OAT/Clause.cs
          branch: gfs/Documentation
          repo: https://github.com/microsoft/OAT.git
        id: Label
        path: ../OAT/Clause.cs
        startLine: 39
      summary: "\nThe Label used for the boolean Expression in the Rule containing this Clause\n\nMay be null iff Expression is null\n"
      example: []
      syntax:
        content:
          CSharp: public string Label { get; set; }
          VB: Public Property Label As String
        parameters: []
        return:
          type: System.String
      overload: Microsoft.CST.OAT.Clause.Label*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Microsoft.CST.OAT.Clause.Operation
      commentId: P:Microsoft.CST.OAT.Clause.Operation
      language: CSharp
      name:
        CSharp: Operation
        VB: Operation
      nameWithType:
        CSharp: Clause.Operation
        VB: Clause.Operation
      qualifiedName:
        CSharp: Microsoft.CST.OAT.Clause.Operation
        VB: Microsoft.CST.OAT.Clause.Operation
      type: Property
      assemblies:
      - OAT
      namespace: Microsoft.CST.OAT
      source:
        remote:
          path: OAT/Clause.cs
          branch: gfs/Documentation
          repo: https://github.com/microsoft/OAT.git
        id: Operation
        path: ../OAT/Clause.cs
        startLine: 43
      summary: "\nThe Operation to perform\n"
      example: []
      syntax:
        content:
          CSharp: public OPERATION Operation { get; set; }
          VB: Public Property Operation As OPERATION
        parameters: []
        return:
          type: Microsoft.CST.OAT.OPERATION
      overload: Microsoft.CST.OAT.Clause.Operation*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Microsoft.CST.OAT.Clause.CustomOperation
      commentId: P:Microsoft.CST.OAT.Clause.CustomOperation
      language: CSharp
      name:
        CSharp: CustomOperation
        VB: CustomOperation
      nameWithType:
        CSharp: Clause.CustomOperation
        VB: Clause.CustomOperation
      qualifiedName:
        CSharp: Microsoft.CST.OAT.Clause.CustomOperation
        VB: Microsoft.CST.OAT.Clause.CustomOperation
      type: Property
      assemblies:
      - OAT
      namespace: Microsoft.CST.OAT
      source:
        remote:
          path: OAT/Clause.cs
          branch: gfs/Documentation
          repo: https://github.com/microsoft/OAT.git
        id: CustomOperation
        path: ../OAT/Clause.cs
        startLine: 47
      summary: "\nA string indicating what custom operation should be performed, if Operation is CUSTOM\n"
      example: []
      syntax:
        content:
          CSharp: public string CustomOperation { get; set; }
          VB: Public Property CustomOperation As String
        parameters: []
        return:
          type: System.String
      overload: Microsoft.CST.OAT.Clause.CustomOperation*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
  - id: Microsoft.CST.OAT.OPERATION
    commentId: T:Microsoft.CST.OAT.OPERATION
    language: CSharp
    name:
      CSharp: OPERATION
      VB: OPERATION
    nameWithType:
      CSharp: OPERATION
      VB: OPERATION
    qualifiedName:
      CSharp: Microsoft.CST.OAT.OPERATION
      VB: Microsoft.CST.OAT.OPERATION
    type: Enum
    assemblies:
    - OAT
    namespace: Microsoft.CST.OAT
    source:
      remote:
        path: OAT/Operation.cs
        branch: gfs/Documentation
        repo: https://github.com/microsoft/OAT.git
      id: OPERATION
      path: ../OAT/Operation.cs
      startLine: 5
    summary: "\nOperations available for Analysis rules.\n"
    example: []
    syntax:
      content:
        CSharp: public enum OPERATION
        VB: Public Enum OPERATION
    modifiers:
      CSharp:
      - public
      - enum
      VB:
      - Public
      - Enum
    items:
    - id: Microsoft.CST.OAT.OPERATION.REGEX
      commentId: F:Microsoft.CST.OAT.OPERATION.REGEX
      language: CSharp
      name:
        CSharp: REGEX
        VB: REGEX
      nameWithType:
        CSharp: OPERATION.REGEX
        VB: OPERATION.REGEX
      qualifiedName:
        CSharp: Microsoft.CST.OAT.OPERATION.REGEX
        VB: Microsoft.CST.OAT.OPERATION.REGEX
      type: Field
      assemblies:
      - OAT
      namespace: Microsoft.CST.OAT
      source:
        remote:
          path: OAT/Operation.cs
          branch: gfs/Documentation
          repo: https://github.com/microsoft/OAT.git
        id: REGEX
        path: ../OAT/Operation.cs
        startLine: 11
      summary: "\nGenerates regular expressions from the Data list provided and tests them against the specified\nfield. If any match it is a success.\n"
      example: []
      syntax:
        content:
          CSharp: REGEX = 0
          VB: REGEX = 0
        return:
          type: Microsoft.CST.OAT.OPERATION
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Microsoft.CST.OAT.OPERATION.EQ
      commentId: F:Microsoft.CST.OAT.OPERATION.EQ
      language: CSharp
      name:
        CSharp: EQ
        VB: EQ
      nameWithType:
        CSharp: OPERATION.EQ
        VB: OPERATION.EQ
      qualifiedName:
        CSharp: Microsoft.CST.OAT.OPERATION.EQ
        VB: Microsoft.CST.OAT.OPERATION.EQ
      type: Field
      assemblies:
      - OAT
      namespace: Microsoft.CST.OAT
      source:
        remote:
          path: OAT/Operation.cs
          branch: gfs/Documentation
          repo: https://github.com/microsoft/OAT.git
        id: EQ
        path: ../OAT/Operation.cs
        startLine: 17
      summary: "\nChecks that any value in the Data list or DictData dictionary have a match in the specified\nfield&apos;s object as appropriate.\n"
      example: []
      syntax:
        content:
          CSharp: EQ = 1
          VB: EQ = 1
        return:
          type: Microsoft.CST.OAT.OPERATION
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Microsoft.CST.OAT.OPERATION.NEQ
      commentId: F:Microsoft.CST.OAT.OPERATION.NEQ
      language: CSharp
      name:
        CSharp: NEQ
        VB: NEQ
      nameWithType:
        CSharp: OPERATION.NEQ
        VB: OPERATION.NEQ
      qualifiedName:
        CSharp: Microsoft.CST.OAT.OPERATION.NEQ
        VB: Microsoft.CST.OAT.OPERATION.NEQ
      type: Field
      assemblies:
      - OAT
      namespace: Microsoft.CST.OAT
      source:
        remote:
          path: OAT/Operation.cs
          branch: gfs/Documentation
          repo: https://github.com/microsoft/OAT.git
        id: NEQ
        path: ../OAT/Operation.cs
        startLine: 23
      summary: "\nChecks that any value in the Data list or DictData dictionary does not have a match in the\nspecified field&apos;s object as appropriate.\n"
      example: []
      syntax:
        content:
          CSharp: NEQ = 2
          VB: NEQ = 2
        return:
          type: Microsoft.CST.OAT.OPERATION
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Microsoft.CST.OAT.OPERATION.LT
      commentId: F:Microsoft.CST.OAT.OPERATION.LT
      language: CSharp
      name:
        CSharp: LT
        VB: LT
      nameWithType:
        CSharp: OPERATION.LT
        VB: OPERATION.LT
      qualifiedName:
        CSharp: Microsoft.CST.OAT.OPERATION.LT
        VB: Microsoft.CST.OAT.OPERATION.LT
      type: Field
      assemblies:
      - OAT
      namespace: Microsoft.CST.OAT
      source:
        remote:
          path: OAT/Operation.cs
          branch: gfs/Documentation
          repo: https://github.com/microsoft/OAT.git
        id: LT
        path: ../OAT/Operation.cs
        startLine: 29
      summary: "\nChecks whether any of the specified fields values when parsed as an int is less than first value in\nthe Data list as Parsed as an int\n"
      example: []
      syntax:
        content:
          CSharp: LT = 3
          VB: LT = 3
        return:
          type: Microsoft.CST.OAT.OPERATION
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Microsoft.CST.OAT.OPERATION.GT
      commentId: F:Microsoft.CST.OAT.OPERATION.GT
      language: CSharp
      name:
        CSharp: GT
        VB: GT
      nameWithType:
        CSharp: OPERATION.GT
        VB: OPERATION.GT
      qualifiedName:
        CSharp: Microsoft.CST.OAT.OPERATION.GT
        VB: Microsoft.CST.OAT.OPERATION.GT
      type: Field
      assemblies:
      - OAT
      namespace: Microsoft.CST.OAT
      source:
        remote:
          path: OAT/Operation.cs
          branch: gfs/Documentation
          repo: https://github.com/microsoft/OAT.git
        id: GT
        path: ../OAT/Operation.cs
        startLine: 35
      summary: "\nChecks whether any of the specified fields values when parsed as an int is greater than first value in\nthe Data list as Parsed as an int\n"
      example: []
      syntax:
        content:
          CSharp: GT = 4
          VB: GT = 4
        return:
          type: Microsoft.CST.OAT.OPERATION
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Microsoft.CST.OAT.OPERATION.CONTAINS
      commentId: F:Microsoft.CST.OAT.OPERATION.CONTAINS
      language: CSharp
      name:
        CSharp: CONTAINS
        VB: CONTAINS
      nameWithType:
        CSharp: OPERATION.CONTAINS
        VB: OPERATION.CONTAINS
      qualifiedName:
        CSharp: Microsoft.CST.OAT.OPERATION.CONTAINS
        VB: Microsoft.CST.OAT.OPERATION.CONTAINS
      type: Field
      assemblies:
      - OAT
      namespace: Microsoft.CST.OAT
      source:
        remote:
          path: OAT/Operation.cs
          branch: gfs/Documentation
          repo: https://github.com/microsoft/OAT.git
        id: CONTAINS
        path: ../OAT/Operation.cs
        startLine: 41
      summary: "\nChecks if the specified fields values contain all of the data in the Data list or DictData\ndictionary as appropriate for the field.\n"
      example: []
      syntax:
        content:
          CSharp: CONTAINS = 5
          VB: CONTAINS = 5
        return:
          type: Microsoft.CST.OAT.OPERATION
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Microsoft.CST.OAT.OPERATION.DOES_NOT_CONTAIN
      commentId: F:Microsoft.CST.OAT.OPERATION.DOES_NOT_CONTAIN
      language: CSharp
      name:
        CSharp: DOES_NOT_CONTAIN
        VB: DOES_NOT_CONTAIN
      nameWithType:
        CSharp: OPERATION.DOES_NOT_CONTAIN
        VB: OPERATION.DOES_NOT_CONTAIN
      qualifiedName:
        CSharp: Microsoft.CST.OAT.OPERATION.DOES_NOT_CONTAIN
        VB: Microsoft.CST.OAT.OPERATION.DOES_NOT_CONTAIN
      type: Field
      assemblies:
      - OAT
      namespace: Microsoft.CST.OAT
      source:
        remote:
          path: OAT/Operation.cs
          branch: gfs/Documentation
          repo: https://github.com/microsoft/OAT.git
        id: DOES_NOT_CONTAIN
        path: ../OAT/Operation.cs
        startLine: 47
      summary: "\nChecks if the specified fields values does not contain any of the data in the Data list or\nDictData dictionary as appropriate for the field.\n"
      example: []
      syntax:
        content:
          CSharp: DOES_NOT_CONTAIN = 6
          VB: DOES_NOT_CONTAIN = 6
        return:
          type: Microsoft.CST.OAT.OPERATION
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Microsoft.CST.OAT.OPERATION.WAS_MODIFIED
      commentId: F:Microsoft.CST.OAT.OPERATION.WAS_MODIFIED
      language: CSharp
      name:
        CSharp: WAS_MODIFIED
        VB: WAS_MODIFIED
      nameWithType:
        CSharp: OPERATION.WAS_MODIFIED
        VB: OPERATION.WAS_MODIFIED
      qualifiedName:
        CSharp: Microsoft.CST.OAT.OPERATION.WAS_MODIFIED
        VB: Microsoft.CST.OAT.OPERATION.WAS_MODIFIED
      type: Field
      assemblies:
      - OAT
      namespace: Microsoft.CST.OAT
      source:
        remote:
          path: OAT/Operation.cs
          branch: gfs/Documentation
          repo: https://github.com/microsoft/OAT.git
        id: WAS_MODIFIED
        path: ../OAT/Operation.cs
        startLine: 52
      summary: "\nChecks if the specified field was modified between the two runs.\n"
      example: []
      syntax:
        content:
          CSharp: WAS_MODIFIED = 7
          VB: WAS_MODIFIED = 7
        return:
          type: Microsoft.CST.OAT.OPERATION
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Microsoft.CST.OAT.OPERATION.ENDS_WITH
      commentId: F:Microsoft.CST.OAT.OPERATION.ENDS_WITH
      language: CSharp
      name:
        CSharp: ENDS_WITH
        VB: ENDS_WITH
      nameWithType:
        CSharp: OPERATION.ENDS_WITH
        VB: OPERATION.ENDS_WITH
      qualifiedName:
        CSharp: Microsoft.CST.OAT.OPERATION.ENDS_WITH
        VB: Microsoft.CST.OAT.OPERATION.ENDS_WITH
      type: Field
      assemblies:
      - OAT
      namespace: Microsoft.CST.OAT
      source:
        remote:
          path: OAT/Operation.cs
          branch: gfs/Documentation
          repo: https://github.com/microsoft/OAT.git
        id: ENDS_WITH
        path: ../OAT/Operation.cs
        startLine: 57
      summary: "\nChecks if the specified field ends with any of the strings in the Data list.\n"
      example: []
      syntax:
        content:
          CSharp: ENDS_WITH = 8
          VB: ENDS_WITH = 8
        return:
          type: Microsoft.CST.OAT.OPERATION
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Microsoft.CST.OAT.OPERATION.STARTS_WITH
      commentId: F:Microsoft.CST.OAT.OPERATION.STARTS_WITH
      language: CSharp
      name:
        CSharp: STARTS_WITH
        VB: STARTS_WITH
      nameWithType:
        CSharp: OPERATION.STARTS_WITH
        VB: OPERATION.STARTS_WITH
      qualifiedName:
        CSharp: Microsoft.CST.OAT.OPERATION.STARTS_WITH
        VB: Microsoft.CST.OAT.OPERATION.STARTS_WITH
      type: Field
      assemblies:
      - OAT
      namespace: Microsoft.CST.OAT
      source:
        remote:
          path: OAT/Operation.cs
          branch: gfs/Documentation
          repo: https://github.com/microsoft/OAT.git
        id: STARTS_WITH
        path: ../OAT/Operation.cs
        startLine: 62
      summary: "\nChecks if the specified field starts with any of the strings in the Data list.\n"
      example: []
      syntax:
        content:
          CSharp: STARTS_WITH = 9
          VB: STARTS_WITH = 9
        return:
          type: Microsoft.CST.OAT.OPERATION
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Microsoft.CST.OAT.OPERATION.CONTAINS_ANY
      commentId: F:Microsoft.CST.OAT.OPERATION.CONTAINS_ANY
      language: CSharp
      name:
        CSharp: CONTAINS_ANY
        VB: CONTAINS_ANY
      nameWithType:
        CSharp: OPERATION.CONTAINS_ANY
        VB: OPERATION.CONTAINS_ANY
      qualifiedName:
        CSharp: Microsoft.CST.OAT.OPERATION.CONTAINS_ANY
        VB: Microsoft.CST.OAT.OPERATION.CONTAINS_ANY
      type: Field
      assemblies:
      - OAT
      namespace: Microsoft.CST.OAT
      source:
        remote:
          path: OAT/Operation.cs
          branch: gfs/Documentation
          repo: https://github.com/microsoft/OAT.git
        id: CONTAINS_ANY
        path: ../OAT/Operation.cs
        startLine: 68
      summary: "\nChecks if the specified fields values contain any of the data in the Data list or DictData\ndictionary as appropriate for the field.\n"
      example: []
      syntax:
        content:
          CSharp: CONTAINS_ANY = 10
          VB: CONTAINS_ANY = 10
        return:
          type: Microsoft.CST.OAT.OPERATION
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Microsoft.CST.OAT.OPERATION.DOES_NOT_CONTAIN_ALL
      commentId: F:Microsoft.CST.OAT.OPERATION.DOES_NOT_CONTAIN_ALL
      language: CSharp
      name:
        CSharp: DOES_NOT_CONTAIN_ALL
        VB: DOES_NOT_CONTAIN_ALL
      nameWithType:
        CSharp: OPERATION.DOES_NOT_CONTAIN_ALL
        VB: OPERATION.DOES_NOT_CONTAIN_ALL
      qualifiedName:
        CSharp: Microsoft.CST.OAT.OPERATION.DOES_NOT_CONTAIN_ALL
        VB: Microsoft.CST.OAT.OPERATION.DOES_NOT_CONTAIN_ALL
      type: Field
      assemblies:
      - OAT
      namespace: Microsoft.CST.OAT
      source:
        remote:
          path: OAT/Operation.cs
          branch: gfs/Documentation
          repo: https://github.com/microsoft/OAT.git
        id: DOES_NOT_CONTAIN_ALL
        path: ../OAT/Operation.cs
        startLine: 74
      summary: "\nChecks if the specified fields values does not contain all of the data in the Data list or\nDictData dictionary as appropriate for the field.\n"
      example: []
      syntax:
        content:
          CSharp: DOES_NOT_CONTAIN_ALL = 11
          VB: DOES_NOT_CONTAIN_ALL = 11
        return:
          type: Microsoft.CST.OAT.OPERATION
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Microsoft.CST.OAT.OPERATION.IS_NULL
      commentId: F:Microsoft.CST.OAT.OPERATION.IS_NULL
      language: CSharp
      name:
        CSharp: IS_NULL
        VB: IS_NULL
      nameWithType:
        CSharp: OPERATION.IS_NULL
        VB: OPERATION.IS_NULL
      qualifiedName:
        CSharp: Microsoft.CST.OAT.OPERATION.IS_NULL
        VB: Microsoft.CST.OAT.OPERATION.IS_NULL
      type: Field
      assemblies:
      - OAT
      namespace: Microsoft.CST.OAT
      source:
        remote:
          path: OAT/Operation.cs
          branch: gfs/Documentation
          repo: https://github.com/microsoft/OAT.git
        id: IS_NULL
        path: ../OAT/Operation.cs
        startLine: 79
      summary: "\nChecks if the specified field is null in both states.\n"
      example: []
      syntax:
        content:
          CSharp: IS_NULL = 12
          VB: IS_NULL = 12
        return:
          type: Microsoft.CST.OAT.OPERATION
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Microsoft.CST.OAT.OPERATION.IS_TRUE
      commentId: F:Microsoft.CST.OAT.OPERATION.IS_TRUE
      language: CSharp
      name:
        CSharp: IS_TRUE
        VB: IS_TRUE
      nameWithType:
        CSharp: OPERATION.IS_TRUE
        VB: OPERATION.IS_TRUE
      qualifiedName:
        CSharp: Microsoft.CST.OAT.OPERATION.IS_TRUE
        VB: Microsoft.CST.OAT.OPERATION.IS_TRUE
      type: Field
      assemblies:
      - OAT
      namespace: Microsoft.CST.OAT
      source:
        remote:
          path: OAT/Operation.cs
          branch: gfs/Documentation
          repo: https://github.com/microsoft/OAT.git
        id: IS_TRUE
        path: ../OAT/Operation.cs
        startLine: 84
      summary: "\nChecks if the specified field is true in either state.\n"
      example: []
      syntax:
        content:
          CSharp: IS_TRUE = 13
          VB: IS_TRUE = 13
        return:
          type: Microsoft.CST.OAT.OPERATION
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Microsoft.CST.OAT.OPERATION.IS_BEFORE
      commentId: F:Microsoft.CST.OAT.OPERATION.IS_BEFORE
      language: CSharp
      name:
        CSharp: IS_BEFORE
        VB: IS_BEFORE
      nameWithType:
        CSharp: OPERATION.IS_BEFORE
        VB: OPERATION.IS_BEFORE
      qualifiedName:
        CSharp: Microsoft.CST.OAT.OPERATION.IS_BEFORE
        VB: Microsoft.CST.OAT.OPERATION.IS_BEFORE
      type: Field
      assemblies:
      - OAT
      namespace: Microsoft.CST.OAT
      source:
        remote:
          path: OAT/Operation.cs
          branch: gfs/Documentation
          repo: https://github.com/microsoft/OAT.git
        id: IS_BEFORE
        path: ../OAT/Operation.cs
        startLine: 90
      summary: "\nChecks if the specified field, as parsed as time, is before the time specified in the first\nentry of the Data list\n"
      example: []
      syntax:
        content:
          CSharp: IS_BEFORE = 14
          VB: IS_BEFORE = 14
        return:
          type: Microsoft.CST.OAT.OPERATION
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Microsoft.CST.OAT.OPERATION.IS_AFTER
      commentId: F:Microsoft.CST.OAT.OPERATION.IS_AFTER
      language: CSharp
      name:
        CSharp: IS_AFTER
        VB: IS_AFTER
      nameWithType:
        CSharp: OPERATION.IS_AFTER
        VB: OPERATION.IS_AFTER
      qualifiedName:
        CSharp: Microsoft.CST.OAT.OPERATION.IS_AFTER
        VB: Microsoft.CST.OAT.OPERATION.IS_AFTER
      type: Field
      assemblies:
      - OAT
      namespace: Microsoft.CST.OAT
      source:
        remote:
          path: OAT/Operation.cs
          branch: gfs/Documentation
          repo: https://github.com/microsoft/OAT.git
        id: IS_AFTER
        path: ../OAT/Operation.cs
        startLine: 96
      summary: "\nChecks if the specified field, as parsed as time, is after the time specified in the first\nentry of the Data list\n"
      example: []
      syntax:
        content:
          CSharp: IS_AFTER = 15
          VB: IS_AFTER = 15
        return:
          type: Microsoft.CST.OAT.OPERATION
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Microsoft.CST.OAT.OPERATION.IS_EXPIRED
      commentId: F:Microsoft.CST.OAT.OPERATION.IS_EXPIRED
      language: CSharp
      name:
        CSharp: IS_EXPIRED
        VB: IS_EXPIRED
      nameWithType:
        CSharp: OPERATION.IS_EXPIRED
        VB: OPERATION.IS_EXPIRED
      qualifiedName:
        CSharp: Microsoft.CST.OAT.OPERATION.IS_EXPIRED
        VB: Microsoft.CST.OAT.OPERATION.IS_EXPIRED
      type: Field
      assemblies:
      - OAT
      namespace: Microsoft.CST.OAT
      source:
        remote:
          path: OAT/Operation.cs
          branch: gfs/Documentation
          repo: https://github.com/microsoft/OAT.git
        id: IS_EXPIRED
        path: ../OAT/Operation.cs
        startLine: 101
      summary: "\nChecks if the specified field, as parsed as time, is before DateTime.Now.\n"
      example: []
      syntax:
        content:
          CSharp: IS_EXPIRED = 16
          VB: IS_EXPIRED = 16
        return:
          type: Microsoft.CST.OAT.OPERATION
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Microsoft.CST.OAT.OPERATION.CONTAINS_KEY
      commentId: F:Microsoft.CST.OAT.OPERATION.CONTAINS_KEY
      language: CSharp
      name:
        CSharp: CONTAINS_KEY
        VB: CONTAINS_KEY
      nameWithType:
        CSharp: OPERATION.CONTAINS_KEY
        VB: OPERATION.CONTAINS_KEY
      qualifiedName:
        CSharp: Microsoft.CST.OAT.OPERATION.CONTAINS_KEY
        VB: Microsoft.CST.OAT.OPERATION.CONTAINS_KEY
      type: Field
      assemblies:
      - OAT
      namespace: Microsoft.CST.OAT
      source:
        remote:
          path: OAT/Operation.cs
          branch: gfs/Documentation
          repo: https://github.com/microsoft/OAT.git
        id: CONTAINS_KEY
        path: ../OAT/Operation.cs
        startLine: 106
      summary: "\nChecks if the field, if a dictionary, contains the specified key\n"
      example: []
      syntax:
        content:
          CSharp: CONTAINS_KEY = 17
          VB: CONTAINS_KEY = 17
        return:
          type: Microsoft.CST.OAT.OPERATION
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Microsoft.CST.OAT.OPERATION.CUSTOM
      commentId: F:Microsoft.CST.OAT.OPERATION.CUSTOM
      language: CSharp
      name:
        CSharp: CUSTOM
        VB: CUSTOM
      nameWithType:
        CSharp: OPERATION.CUSTOM
        VB: OPERATION.CUSTOM
      qualifiedName:
        CSharp: Microsoft.CST.OAT.OPERATION.CUSTOM
        VB: Microsoft.CST.OAT.OPERATION.CUSTOM
      type: Field
      assemblies:
      - OAT
      namespace: Microsoft.CST.OAT
      source:
        remote:
          path: OAT/Operation.cs
          branch: gfs/Documentation
          repo: https://github.com/microsoft/OAT.git
        id: CUSTOM
        path: ../OAT/Operation.cs
        startLine: 111
      summary: "\nSpecifies that a custom operation has been specified\n"
      example: []
      syntax:
        content:
          CSharp: CUSTOM = 18
          VB: CUSTOM = 18
        return:
          type: Microsoft.CST.OAT.OPERATION
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
  - id: Microsoft.CST.OAT.Rule
    commentId: T:Microsoft.CST.OAT.Rule
    language: CSharp
    name:
      CSharp: Rule
      VB: Rule
    nameWithType:
      CSharp: Rule
      VB: Rule
    qualifiedName:
      CSharp: Microsoft.CST.OAT.Rule
      VB: Microsoft.CST.OAT.Rule
    type: Class
    assemblies:
    - OAT
    namespace: Microsoft.CST.OAT
    source:
      remote:
        path: OAT/Rule.cs
        branch: gfs/Documentation
        repo: https://github.com/microsoft/OAT.git
      id: Rule
      path: ../OAT/Rule.cs
      startLine: 9
    summary: "\nA Rule holds Clauses and optionally has an Expression.\n"
    example: []
    syntax:
      content:
        CSharp: public class Rule
        VB: Public Class Rule
    inheritance:
    - System.Object
    inheritedMembers:
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.ToString
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Microsoft.CST.OAT.Rule.#ctor(System.String)
      commentId: M:Microsoft.CST.OAT.Rule.#ctor(System.String)
      language: CSharp
      name:
        CSharp: Rule(String)
        VB: Rule(String)
      nameWithType:
        CSharp: Rule.Rule(String)
        VB: Rule.Rule(String)
      qualifiedName:
        CSharp: Microsoft.CST.OAT.Rule.Rule(System.String)
        VB: Microsoft.CST.OAT.Rule.Rule(System.String)
      type: Constructor
      assemblies:
      - OAT
      namespace: Microsoft.CST.OAT
      source:
        remote:
          path: OAT/Rule.cs
          branch: gfs/Documentation
          repo: https://github.com/microsoft/OAT.git
        id: .ctor
        path: ../OAT/Rule.cs
        startLine: 15
      summary: "\nThe constructor for a Rule\n"
      example: []
      syntax:
        content:
          CSharp: public Rule(string Name)
          VB: Public Sub New(Name As String)
        parameters:
        - id: Name
          type: System.String
          description: The Name of the rule
      overload: Microsoft.CST.OAT.Rule.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Microsoft.CST.OAT.Rule.Clauses
      commentId: P:Microsoft.CST.OAT.Rule.Clauses
      language: CSharp
      name:
        CSharp: Clauses
        VB: Clauses
      nameWithType:
        CSharp: Rule.Clauses
        VB: Rule.Clauses
      qualifiedName:
        CSharp: Microsoft.CST.OAT.Rule.Clauses
        VB: Microsoft.CST.OAT.Rule.Clauses
      type: Property
      assemblies:
      - OAT
      namespace: Microsoft.CST.OAT
      source:
        remote:
          path: OAT/Rule.cs
          branch: gfs/Documentation
          repo: https://github.com/microsoft/OAT.git
        id: Clauses
        path: ../OAT/Rule.cs
        startLine: 23
      summary: "\nThe list of Clauses to apply\n"
      example: []
      syntax:
        content:
          CSharp: public List<Clause> Clauses { get; set; }
          VB: Public Property Clauses As List(Of Clause)
        parameters: []
        return:
          type: System.Collections.Generic.List{Microsoft.CST.OAT.Clause}
      overload: Microsoft.CST.OAT.Rule.Clauses*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Microsoft.CST.OAT.Rule.Description
      commentId: P:Microsoft.CST.OAT.Rule.Description
      language: CSharp
      name:
        CSharp: Description
        VB: Description
      nameWithType:
        CSharp: Rule.Description
        VB: Rule.Description
      qualifiedName:
        CSharp: Microsoft.CST.OAT.Rule.Description
        VB: Microsoft.CST.OAT.Rule.Description
      type: Property
      assemblies:
      - OAT
      namespace: Microsoft.CST.OAT
      source:
        remote:
          path: OAT/Rule.cs
          branch: gfs/Documentation
          repo: https://github.com/microsoft/OAT.git
        id: Description
        path: ../OAT/Rule.cs
        startLine: 27
      summary: "\nA description of the rule\n"
      example: []
      syntax:
        content:
          CSharp: public string Description { get; set; }
          VB: Public Property Description As String
        parameters: []
        return:
          type: System.String
      overload: Microsoft.CST.OAT.Rule.Description*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Microsoft.CST.OAT.Rule.Expression
      commentId: P:Microsoft.CST.OAT.Rule.Expression
      language: CSharp
      name:
        CSharp: Expression
        VB: Expression
      nameWithType:
        CSharp: Rule.Expression
        VB: Rule.Expression
      qualifiedName:
        CSharp: Microsoft.CST.OAT.Rule.Expression
        VB: Microsoft.CST.OAT.Rule.Expression
      type: Property
      assemblies:
      - OAT
      namespace: Microsoft.CST.OAT
      source:
        remote:
          path: OAT/Rule.cs
          branch: gfs/Documentation
          repo: https://github.com/microsoft/OAT.git
        id: Expression
        path: ../OAT/Rule.cs
        startLine: 33
      summary: "\nThe boolean expression to apply over the Clauses.\n\nIf Expression is null the Clauses will be ANDed together.\n"
      example: []
      syntax:
        content:
          CSharp: public string Expression { get; set; }
          VB: Public Property Expression As String
        parameters: []
        return:
          type: System.String
      overload: Microsoft.CST.OAT.Rule.Expression*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Microsoft.CST.OAT.Rule.Name
      commentId: P:Microsoft.CST.OAT.Rule.Name
      language: CSharp
      name:
        CSharp: Name
        VB: Name
      nameWithType:
        CSharp: Rule.Name
        VB: Rule.Name
      qualifiedName:
        CSharp: Microsoft.CST.OAT.Rule.Name
        VB: Microsoft.CST.OAT.Rule.Name
      type: Property
      assemblies:
      - OAT
      namespace: Microsoft.CST.OAT
      source:
        remote:
          path: OAT/Rule.cs
          branch: gfs/Documentation
          repo: https://github.com/microsoft/OAT.git
        id: Name
        path: ../OAT/Rule.cs
        startLine: 37
      summary: "\nThe name of the Rule\n"
      example: []
      syntax:
        content:
          CSharp: public string Name { get; set; }
          VB: Public Property Name As String
        parameters: []
        return:
          type: System.String
      overload: Microsoft.CST.OAT.Rule.Name*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Microsoft.CST.OAT.Rule.Target
      commentId: P:Microsoft.CST.OAT.Rule.Target
      language: CSharp
      name:
        CSharp: Target
        VB: Target
      nameWithType:
        CSharp: Rule.Target
        VB: Rule.Target
      qualifiedName:
        CSharp: Microsoft.CST.OAT.Rule.Target
        VB: Microsoft.CST.OAT.Rule.Target
      type: Property
      assemblies:
      - OAT
      namespace: Microsoft.CST.OAT
      source:
        remote:
          path: OAT/Rule.cs
          branch: gfs/Documentation
          repo: https://github.com/microsoft/OAT.git
        id: Target
        path: ../OAT/Rule.cs
        startLine: 41
      summary: "\nThe Name of the targeted object&apos;s Type\n"
      example: []
      syntax:
        content:
          CSharp: public string Target { get; set; }
          VB: Public Property Target As String
        parameters: []
        return:
          type: System.String
      overload: Microsoft.CST.OAT.Rule.Target*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Microsoft.CST.OAT.Rule.Severity
      commentId: P:Microsoft.CST.OAT.Rule.Severity
      language: CSharp
      name:
        CSharp: Severity
        VB: Severity
      nameWithType:
        CSharp: Rule.Severity
        VB: Rule.Severity
      qualifiedName:
        CSharp: Microsoft.CST.OAT.Rule.Severity
        VB: Microsoft.CST.OAT.Rule.Severity
      type: Property
      assemblies:
      - OAT
      namespace: Microsoft.CST.OAT
      source:
        remote:
          path: OAT/Rule.cs
          branch: gfs/Documentation
          repo: https://github.com/microsoft/OAT.git
        id: Severity
        path: ../OAT/Rule.cs
        startLine: 45
      summary: "\nAn int associated with the rule\n"
      example: []
      syntax:
        content:
          CSharp: public int Severity { get; set; }
          VB: Public Property Severity As Integer
        parameters: []
        return:
          type: System.Int32
      overload: Microsoft.CST.OAT.Rule.Severity*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Microsoft.CST.OAT.Rule.Tags
      commentId: P:Microsoft.CST.OAT.Rule.Tags
      language: CSharp
      name:
        CSharp: Tags
        VB: Tags
      nameWithType:
        CSharp: Rule.Tags
        VB: Rule.Tags
      qualifiedName:
        CSharp: Microsoft.CST.OAT.Rule.Tags
        VB: Microsoft.CST.OAT.Rule.Tags
      type: Property
      assemblies:
      - OAT
      namespace: Microsoft.CST.OAT
      source:
        remote:
          path: OAT/Rule.cs
          branch: gfs/Documentation
          repo: https://github.com/microsoft/OAT.git
        id: Tags
        path: ../OAT/Rule.cs
        startLine: 49
      summary: "\nA set of Tags assigned to the rule\n"
      example: []
      syntax:
        content:
          CSharp: public string[] Tags { get; set; }
          VB: Public Property Tags As String()
        parameters: []
        return:
          type: System.String[]
      overload: Microsoft.CST.OAT.Rule.Tags*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
  - id: Microsoft.CST.OAT.Violation
    commentId: T:Microsoft.CST.OAT.Violation
    language: CSharp
    name:
      CSharp: Violation
      VB: Violation
    nameWithType:
      CSharp: Violation
      VB: Violation
    qualifiedName:
      CSharp: Microsoft.CST.OAT.Violation
      VB: Microsoft.CST.OAT.Violation
    type: Class
    assemblies:
    - OAT
    namespace: Microsoft.CST.OAT
    source:
      remote:
        path: OAT/Violation.cs
        branch: gfs/Documentation
        repo: https://github.com/microsoft/OAT.git
      id: Violation
      path: ../OAT/Violation.cs
      startLine: 8
    summary: "\nA violation found when validating rules\n"
    example: []
    syntax:
      content:
        CSharp: public class Violation
        VB: Public Class Violation
    inheritance:
    - System.Object
    inheritedMembers:
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.ToString
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Microsoft.CST.OAT.Violation.rule
      commentId: P:Microsoft.CST.OAT.Violation.rule
      language: CSharp
      name:
        CSharp: rule
        VB: rule
      nameWithType:
        CSharp: Violation.rule
        VB: Violation.rule
      qualifiedName:
        CSharp: Microsoft.CST.OAT.Violation.rule
        VB: Microsoft.CST.OAT.Violation.rule
      type: Property
      assemblies:
      - OAT
      namespace: Microsoft.CST.OAT
      source:
        remote:
          path: OAT/Violation.cs
          branch: gfs/Documentation
          repo: https://github.com/microsoft/OAT.git
        id: rule
        path: ../OAT/Violation.cs
        startLine: 13
      summary: "\nThe Rule associated with this violation\n"
      example: []
      syntax:
        content:
          CSharp: public Rule rule { get; set; }
          VB: Public Property rule As Rule
        parameters: []
        return:
          type: Microsoft.CST.OAT.Rule
      overload: Microsoft.CST.OAT.Violation.rule*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Microsoft.CST.OAT.Violation.clauses
      commentId: P:Microsoft.CST.OAT.Violation.clauses
      language: CSharp
      name:
        CSharp: clauses
        VB: clauses
      nameWithType:
        CSharp: Violation.clauses
        VB: Violation.clauses
      qualifiedName:
        CSharp: Microsoft.CST.OAT.Violation.clauses
        VB: Microsoft.CST.OAT.Violation.clauses
      type: Property
      assemblies:
      - OAT
      namespace: Microsoft.CST.OAT
      source:
        remote:
          path: OAT/Violation.cs
          branch: gfs/Documentation
          repo: https://github.com/microsoft/OAT.git
        id: clauses
        path: ../OAT/Violation.cs
        startLine: 17
      summary: "\nThe clauses associated with this violation\n"
      example: []
      syntax:
        content:
          CSharp: public Clause[] clauses { get; set; }
          VB: Public Property clauses As Clause()
        parameters: []
        return:
          type: Microsoft.CST.OAT.Clause[]
      overload: Microsoft.CST.OAT.Violation.clauses*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Microsoft.CST.OAT.Violation.description
      commentId: P:Microsoft.CST.OAT.Violation.description
      language: CSharp
      name:
        CSharp: description
        VB: description
      nameWithType:
        CSharp: Violation.description
        VB: Violation.description
      qualifiedName:
        CSharp: Microsoft.CST.OAT.Violation.description
        VB: Microsoft.CST.OAT.Violation.description
      type: Property
      assemblies:
      - OAT
      namespace: Microsoft.CST.OAT
      source:
        remote:
          path: OAT/Violation.cs
          branch: gfs/Documentation
          repo: https://github.com/microsoft/OAT.git
        id: description
        path: ../OAT/Violation.cs
        startLine: 21
      summary: "\nThe text description of the violation\n"
      example: []
      syntax:
        content:
          CSharp: public string description { get; set; }
          VB: Public Property description As String
        parameters: []
        return:
          type: System.String
      overload: Microsoft.CST.OAT.Violation.description*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Microsoft.CST.OAT.Violation.#ctor(System.String,Microsoft.CST.OAT.Rule)
      commentId: M:Microsoft.CST.OAT.Violation.#ctor(System.String,Microsoft.CST.OAT.Rule)
      language: CSharp
      name:
        CSharp: Violation(String, Rule)
        VB: Violation(String, Rule)
      nameWithType:
        CSharp: Violation.Violation(String, Rule)
        VB: Violation.Violation(String, Rule)
      qualifiedName:
        CSharp: Microsoft.CST.OAT.Violation.Violation(System.String, Microsoft.CST.OAT.Rule)
        VB: Microsoft.CST.OAT.Violation.Violation(System.String, Microsoft.CST.OAT.Rule)
      type: Constructor
      assemblies:
      - OAT
      namespace: Microsoft.CST.OAT
      source:
        remote:
          path: OAT/Violation.cs
          branch: gfs/Documentation
          repo: https://github.com/microsoft/OAT.git
        id: .ctor
        path: ../OAT/Violation.cs
        startLine: 31
      summary: "\nSimplest constructor.\n\nArguments may not be null.\n"
      example: []
      syntax:
        content:
          CSharp: public Violation(string description, Rule rule)
          VB: Public Sub New(description As String, rule As Rule)
        parameters:
        - id: description
          type: System.String
          description: The description for the violation.
        - id: rule
          type: Microsoft.CST.OAT.Rule
          description: The Rule the violation references
      overload: Microsoft.CST.OAT.Violation.#ctor*
      exceptions:
      - type: System.ArgumentNullException
        commentId: T:System.ArgumentNullException
        description: Thrown when any parameter is null.
      modifiers:
        CSharp:
        - public
        VB:
        - Public
      references:
        System.ArgumentNullException: 
    - id: Microsoft.CST.OAT.Violation.#ctor(System.String,Microsoft.CST.OAT.Rule,Microsoft.CST.OAT.Clause)
      commentId: M:Microsoft.CST.OAT.Violation.#ctor(System.String,Microsoft.CST.OAT.Rule,Microsoft.CST.OAT.Clause)
      language: CSharp
      name:
        CSharp: Violation(String, Rule, Clause)
        VB: Violation(String, Rule, Clause)
      nameWithType:
        CSharp: Violation.Violation(String, Rule, Clause)
        VB: Violation.Violation(String, Rule, Clause)
      qualifiedName:
        CSharp: Microsoft.CST.OAT.Violation.Violation(System.String, Microsoft.CST.OAT.Rule, Microsoft.CST.OAT.Clause)
        VB: Microsoft.CST.OAT.Violation.Violation(System.String, Microsoft.CST.OAT.Rule, Microsoft.CST.OAT.Clause)
      type: Constructor
      assemblies:
      - OAT
      namespace: Microsoft.CST.OAT
      source:
        remote:
          path: OAT/Violation.cs
          branch: gfs/Documentation
          repo: https://github.com/microsoft/OAT.git
        id: .ctor
        path: ../OAT/Violation.cs
        startLine: 42
      summary: "\nUse this constructor if you have only a single clause\n\nArguments may not be null.\n"
      example: []
      syntax:
        content:
          CSharp: public Violation(string description, Rule rule, Clause clause)
          VB: Public Sub New(description As String, rule As Rule, clause As Clause)
        parameters:
        - id: description
          type: System.String
          description: The description for the violation.
        - id: rule
          type: Microsoft.CST.OAT.Rule
          description: The Rule the violation references
        - id: clause
          type: Microsoft.CST.OAT.Clause
          description: The Clause the violation references
      overload: Microsoft.CST.OAT.Violation.#ctor*
      exceptions:
      - type: System.ArgumentNullException
        commentId: T:System.ArgumentNullException
        description: Thrown when any parameter is null.
      modifiers:
        CSharp:
        - public
        VB:
        - Public
      references:
        System.ArgumentNullException: 
    - id: Microsoft.CST.OAT.Violation.#ctor(System.String,Microsoft.CST.OAT.Rule,Microsoft.CST.OAT.Clause[])
      commentId: M:Microsoft.CST.OAT.Violation.#ctor(System.String,Microsoft.CST.OAT.Rule,Microsoft.CST.OAT.Clause[])
      language: CSharp
      name:
        CSharp: Violation(String, Rule, Clause[])
        VB: Violation(String, Rule, Clause())
      nameWithType:
        CSharp: Violation.Violation(String, Rule, Clause[])
        VB: Violation.Violation(String, Rule, Clause())
      qualifiedName:
        CSharp: Microsoft.CST.OAT.Violation.Violation(System.String, Microsoft.CST.OAT.Rule, Microsoft.CST.OAT.Clause[])
        VB: Microsoft.CST.OAT.Violation.Violation(System.String, Microsoft.CST.OAT.Rule, Microsoft.CST.OAT.Clause())
      type: Constructor
      assemblies:
      - OAT
      namespace: Microsoft.CST.OAT
      source:
        remote:
          path: OAT/Violation.cs
          branch: gfs/Documentation
          repo: https://github.com/microsoft/OAT.git
        id: .ctor
        path: ../OAT/Violation.cs
        startLine: 53
      summary: "\nUse this constructor if you have multiple clauses.\n\nArguments may not be null.\n"
      example: []
      syntax:
        content:
          CSharp: public Violation(string description, Rule rule, Clause[] clauses)
          VB: Public Sub New(description As String, rule As Rule, clauses As Clause())
        parameters:
        - id: description
          type: System.String
          description: The description for the violation.
        - id: rule
          type: Microsoft.CST.OAT.Rule
          description: The Rule the violation references
        - id: clauses
          type: Microsoft.CST.OAT.Clause[]
          description: The Clauses the violation references
      overload: Microsoft.CST.OAT.Violation.#ctor*
      exceptions:
      - type: System.ArgumentNullException
        commentId: T:System.ArgumentNullException
        description: Thrown when any parameter is null.
      modifiers:
        CSharp:
        - public
        VB:
        - Public
      references:
        System.ArgumentNullException: 
- id: Microsoft.CST.OAT.Utils
  commentId: N:Microsoft.CST.OAT.Utils
  language: CSharp
  name:
    CSharp: Microsoft.CST.OAT.Utils
    VB: Microsoft.CST.OAT.Utils
  nameWithType:
    CSharp: Microsoft.CST.OAT.Utils
    VB: Microsoft.CST.OAT.Utils
  qualifiedName:
    CSharp: Microsoft.CST.OAT.Utils
    VB: Microsoft.CST.OAT.Utils
  type: Namespace
  assemblies:
  - OAT
  modifiers: {}
  items:
  - id: Microsoft.CST.OAT.Utils.Strings
    commentId: T:Microsoft.CST.OAT.Utils.Strings
    language: CSharp
    name:
      CSharp: Strings
      VB: Strings
    nameWithType:
      CSharp: Strings
      VB: Strings
    qualifiedName:
      CSharp: Microsoft.CST.OAT.Utils.Strings
      VB: Microsoft.CST.OAT.Utils.Strings
    type: Class
    assemblies:
    - OAT
    namespace: Microsoft.CST.OAT.Utils
    source:
      remote:
        path: OAT/Strings.cs
        branch: gfs/Documentation
        repo: https://github.com/microsoft/OAT.git
      id: Strings
      path: ../OAT/Strings.cs
      startLine: 12
    summary: "\nLocalized string fetcher\n"
    example: []
    syntax:
      content:
        CSharp: public static class Strings
        VB: Public Module Strings
    inheritance:
    - System.Object
    inheritedMembers:
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.ToString
    modifiers:
      CSharp:
      - public
      - static
      - class
      VB:
      - Public
      - Module
    items:
    - id: Microsoft.CST.OAT.Utils.Strings.Get(System.String)
      commentId: M:Microsoft.CST.OAT.Utils.Strings.Get(System.String)
      language: CSharp
      name:
        CSharp: Get(String)
        VB: Get(String)
      nameWithType:
        CSharp: Strings.Get(String)
        VB: Strings.Get(String)
      qualifiedName:
        CSharp: Microsoft.CST.OAT.Utils.Strings.Get(System.String)
        VB: Microsoft.CST.OAT.Utils.Strings.Get(System.String)
      type: Method
      assemblies:
      - OAT
      namespace: Microsoft.CST.OAT.Utils
      source:
        remote:
          path: OAT/Strings.cs
          branch: gfs/Documentation
          repo: https://github.com/microsoft/OAT.git
        id: Get
        path: ../OAT/Strings.cs
        startLine: 19
      summary: "\nGet the string at the key specified in the current locale\n"
      example: []
      syntax:
        content:
          CSharp: public static string Get(string key)
          VB: Public Shared Function Get(key As String) As String
        parameters:
        - id: key
          type: System.String
          description: The key to get
        return:
          type: System.String
          description: A string looked up from the table or the key itself if not present
      overload: Microsoft.CST.OAT.Utils.Strings.Get*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Microsoft.CST.OAT.Utils.Strings.Setup(System.String)
      commentId: M:Microsoft.CST.OAT.Utils.Strings.Setup(System.String)
      language: CSharp
      name:
        CSharp: Setup(String)
        VB: Setup(String)
      nameWithType:
        CSharp: Strings.Setup(String)
        VB: Strings.Setup(String)
      qualifiedName:
        CSharp: Microsoft.CST.OAT.Utils.Strings.Setup(System.String)
        VB: Microsoft.CST.OAT.Utils.Strings.Setup(System.String)
      type: Method
      assemblies:
      - OAT
      namespace: Microsoft.CST.OAT.Utils
      source:
        remote:
          path: OAT/Strings.cs
          branch: gfs/Documentation
          repo: https://github.com/microsoft/OAT.git
        id: Setup
        path: ../OAT/Strings.cs
        startLine: 32
      summary: "\nLoad the specified locale&apos;s resources.  Currently only &quot;&quot; is supported for English.\n"
      example: []
      syntax:
        content:
          CSharp: public static void Setup(string locale = "")
          VB: Public Shared Sub Setup(locale As String = "")
        parameters:
        - id: locale
          type: System.String
          description: The name of the locale
      overload: Microsoft.CST.OAT.Utils.Strings.Setup*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Microsoft.CST.OAT.Utils.Strings.IsLoaded
      commentId: P:Microsoft.CST.OAT.Utils.Strings.IsLoaded
      language: CSharp
      name:
        CSharp: IsLoaded
        VB: IsLoaded
      nameWithType:
        CSharp: Strings.IsLoaded
        VB: Strings.IsLoaded
      qualifiedName:
        CSharp: Microsoft.CST.OAT.Utils.Strings.IsLoaded
        VB: Microsoft.CST.OAT.Utils.Strings.IsLoaded
      type: Property
      assemblies:
      - OAT
      namespace: Microsoft.CST.OAT.Utils
      source:
        remote:
          path: OAT/Strings.cs
          branch: gfs/Documentation
          repo: https://github.com/microsoft/OAT.git
        id: IsLoaded
        path: ../OAT/Strings.cs
        startLine: 59
      summary: "\nIf there is any data available in the internal dictionary\n"
      example: []
      syntax:
        content:
          CSharp: public static bool IsLoaded { get; }
          VB: Public Shared ReadOnly Property IsLoaded As Boolean
        parameters: []
        return:
          type: System.Boolean
      overload: Microsoft.CST.OAT.Utils.Strings.IsLoaded*
      modifiers:
        CSharp:
        - public
        - static
        - get
        VB:
        - Public
        - Shared
        - ReadOnly
references:
  System:
    name:
      CSharp:
      - name: System
        nameWithType: System
        qualifiedName: System
        isExternal: true
      VB:
      - name: System
        nameWithType: System
        qualifiedName: System
    isDefinition: true
    commentId: N:System
  System.Object:
    name:
      CSharp:
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      VB:
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Object
  System.Object.Equals(System.Object):
    name:
      CSharp:
      - id: System.Object.Equals(System.Object)
        name: Equals
        nameWithType: Object.Equals
        qualifiedName: System.Object.Equals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.Equals(System.Object)
        name: Equals
        nameWithType: Object.Equals
        qualifiedName: System.Object.Equals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.Equals(System.Object)
  System.Object.Equals(System.Object,System.Object):
    name:
      CSharp:
      - id: System.Object.Equals(System.Object,System.Object)
        name: Equals
        nameWithType: Object.Equals
        qualifiedName: System.Object.Equals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.Equals(System.Object,System.Object)
        name: Equals
        nameWithType: Object.Equals
        qualifiedName: System.Object.Equals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.Equals(System.Object,System.Object)
  System.Object.GetHashCode:
    name:
      CSharp:
      - id: System.Object.GetHashCode
        name: GetHashCode
        nameWithType: Object.GetHashCode
        qualifiedName: System.Object.GetHashCode
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.GetHashCode
        name: GetHashCode
        nameWithType: Object.GetHashCode
        qualifiedName: System.Object.GetHashCode
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.GetHashCode
  System.Object.GetType:
    name:
      CSharp:
      - id: System.Object.GetType
        name: GetType
        nameWithType: Object.GetType
        qualifiedName: System.Object.GetType
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.GetType
        name: GetType
        nameWithType: Object.GetType
        qualifiedName: System.Object.GetType
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.GetType
  System.Object.MemberwiseClone:
    name:
      CSharp:
      - id: System.Object.MemberwiseClone
        name: MemberwiseClone
        nameWithType: Object.MemberwiseClone
        qualifiedName: System.Object.MemberwiseClone
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.MemberwiseClone
        name: MemberwiseClone
        nameWithType: Object.MemberwiseClone
        qualifiedName: System.Object.MemberwiseClone
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.MemberwiseClone
  System.Object.ReferenceEquals(System.Object,System.Object):
    name:
      CSharp:
      - id: System.Object.ReferenceEquals(System.Object,System.Object)
        name: ReferenceEquals
        nameWithType: Object.ReferenceEquals
        qualifiedName: System.Object.ReferenceEquals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.ReferenceEquals(System.Object,System.Object)
        name: ReferenceEquals
        nameWithType: Object.ReferenceEquals
        qualifiedName: System.Object.ReferenceEquals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  System.Object.ToString:
    name:
      CSharp:
      - id: System.Object.ToString
        name: ToString
        nameWithType: Object.ToString
        qualifiedName: System.Object.ToString
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.ToString
        name: ToString
        nameWithType: Object.ToString
        qualifiedName: System.Object.ToString
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.ToString
  Microsoft.CST.OAT.Analyzer.#ctor*:
    name:
      CSharp:
      - id: Microsoft.CST.OAT.Analyzer.#ctor*
        name: Analyzer
        nameWithType: Analyzer.Analyzer
        qualifiedName: Microsoft.CST.OAT.Analyzer.Analyzer
      VB:
      - id: Microsoft.CST.OAT.Analyzer.#ctor*
        name: Analyzer
        nameWithType: Analyzer.Analyzer
        qualifiedName: Microsoft.CST.OAT.Analyzer.Analyzer
    isDefinition: true
    commentId: Overload:Microsoft.CST.OAT.Analyzer.#ctor
  System.Collections.Generic.List`1:
    name:
      CSharp:
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: T:System.Collections.Generic.List`1
  System.Collections.Generic:
    name:
      CSharp:
      - name: System.Collections.Generic
        nameWithType: System.Collections.Generic
        qualifiedName: System.Collections.Generic
        isExternal: true
      VB:
      - name: System.Collections.Generic
        nameWithType: System.Collections.Generic
        qualifiedName: System.Collections.Generic
    isDefinition: true
    commentId: N:System.Collections.Generic
  System.Collections.Generic.List{Microsoft.CST.OAT.Analyzer.PropertyExtractionDelegate}:
    name:
      CSharp:
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Microsoft.CST.OAT.Analyzer.PropertyExtractionDelegate
        name: Analyzer.PropertyExtractionDelegate
        nameWithType: Analyzer.PropertyExtractionDelegate
        qualifiedName: Microsoft.CST.OAT.Analyzer.PropertyExtractionDelegate
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Microsoft.CST.OAT.Analyzer.PropertyExtractionDelegate
        name: Analyzer.PropertyExtractionDelegate
        nameWithType: Analyzer.PropertyExtractionDelegate
        qualifiedName: Microsoft.CST.OAT.Analyzer.PropertyExtractionDelegate
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.List`1
    parent: System.Collections.Generic
    commentId: T:System.Collections.Generic.List{Microsoft.CST.OAT.Analyzer.PropertyExtractionDelegate}
  Microsoft.CST.OAT.Analyzer.CustomPropertyExtractionDelegates*:
    name:
      CSharp:
      - id: Microsoft.CST.OAT.Analyzer.CustomPropertyExtractionDelegates*
        name: CustomPropertyExtractionDelegates
        nameWithType: Analyzer.CustomPropertyExtractionDelegates
        qualifiedName: Microsoft.CST.OAT.Analyzer.CustomPropertyExtractionDelegates
      VB:
      - id: Microsoft.CST.OAT.Analyzer.CustomPropertyExtractionDelegates*
        name: CustomPropertyExtractionDelegates
        nameWithType: Analyzer.CustomPropertyExtractionDelegates
        qualifiedName: Microsoft.CST.OAT.Analyzer.CustomPropertyExtractionDelegates
    isDefinition: true
    commentId: Overload:Microsoft.CST.OAT.Analyzer.CustomPropertyExtractionDelegates
  System.Collections.Generic.List{Microsoft.CST.OAT.Analyzer.ObjectToValuesDelegate}:
    name:
      CSharp:
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Microsoft.CST.OAT.Analyzer.ObjectToValuesDelegate
        name: Analyzer.ObjectToValuesDelegate
        nameWithType: Analyzer.ObjectToValuesDelegate
        qualifiedName: Microsoft.CST.OAT.Analyzer.ObjectToValuesDelegate
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Microsoft.CST.OAT.Analyzer.ObjectToValuesDelegate
        name: Analyzer.ObjectToValuesDelegate
        nameWithType: Analyzer.ObjectToValuesDelegate
        qualifiedName: Microsoft.CST.OAT.Analyzer.ObjectToValuesDelegate
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.List`1
    parent: System.Collections.Generic
    commentId: T:System.Collections.Generic.List{Microsoft.CST.OAT.Analyzer.ObjectToValuesDelegate}
  Microsoft.CST.OAT.Analyzer.CustomObjectToValuesDelegates*:
    name:
      CSharp:
      - id: Microsoft.CST.OAT.Analyzer.CustomObjectToValuesDelegates*
        name: CustomObjectToValuesDelegates
        nameWithType: Analyzer.CustomObjectToValuesDelegates
        qualifiedName: Microsoft.CST.OAT.Analyzer.CustomObjectToValuesDelegates
      VB:
      - id: Microsoft.CST.OAT.Analyzer.CustomObjectToValuesDelegates*
        name: CustomObjectToValuesDelegates
        nameWithType: Analyzer.CustomObjectToValuesDelegates
        qualifiedName: Microsoft.CST.OAT.Analyzer.CustomObjectToValuesDelegates
    isDefinition: true
    commentId: Overload:Microsoft.CST.OAT.Analyzer.CustomObjectToValuesDelegates
  System.Collections.Generic.List{Microsoft.CST.OAT.Analyzer.OperationDelegate}:
    name:
      CSharp:
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Microsoft.CST.OAT.Analyzer.OperationDelegate
        name: Analyzer.OperationDelegate
        nameWithType: Analyzer.OperationDelegate
        qualifiedName: Microsoft.CST.OAT.Analyzer.OperationDelegate
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Microsoft.CST.OAT.Analyzer.OperationDelegate
        name: Analyzer.OperationDelegate
        nameWithType: Analyzer.OperationDelegate
        qualifiedName: Microsoft.CST.OAT.Analyzer.OperationDelegate
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.List`1
    parent: System.Collections.Generic
    commentId: T:System.Collections.Generic.List{Microsoft.CST.OAT.Analyzer.OperationDelegate}
  Microsoft.CST.OAT.Analyzer.CustomOperationDelegates*:
    name:
      CSharp:
      - id: Microsoft.CST.OAT.Analyzer.CustomOperationDelegates*
        name: CustomOperationDelegates
        nameWithType: Analyzer.CustomOperationDelegates
        qualifiedName: Microsoft.CST.OAT.Analyzer.CustomOperationDelegates
      VB:
      - id: Microsoft.CST.OAT.Analyzer.CustomOperationDelegates*
        name: CustomOperationDelegates
        nameWithType: Analyzer.CustomOperationDelegates
        qualifiedName: Microsoft.CST.OAT.Analyzer.CustomOperationDelegates
    isDefinition: true
    commentId: Overload:Microsoft.CST.OAT.Analyzer.CustomOperationDelegates
  System.Collections.Generic.List{Microsoft.CST.OAT.Analyzer.ValidationDelegate}:
    name:
      CSharp:
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Microsoft.CST.OAT.Analyzer.ValidationDelegate
        name: Analyzer.ValidationDelegate
        nameWithType: Analyzer.ValidationDelegate
        qualifiedName: Microsoft.CST.OAT.Analyzer.ValidationDelegate
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Microsoft.CST.OAT.Analyzer.ValidationDelegate
        name: Analyzer.ValidationDelegate
        nameWithType: Analyzer.ValidationDelegate
        qualifiedName: Microsoft.CST.OAT.Analyzer.ValidationDelegate
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.List`1
    parent: System.Collections.Generic
    commentId: T:System.Collections.Generic.List{Microsoft.CST.OAT.Analyzer.ValidationDelegate}
  Microsoft.CST.OAT.Analyzer.CustomOperationValidationDelegates*:
    name:
      CSharp:
      - id: Microsoft.CST.OAT.Analyzer.CustomOperationValidationDelegates*
        name: CustomOperationValidationDelegates
        nameWithType: Analyzer.CustomOperationValidationDelegates
        qualifiedName: Microsoft.CST.OAT.Analyzer.CustomOperationValidationDelegates
      VB:
      - id: Microsoft.CST.OAT.Analyzer.CustomOperationValidationDelegates*
        name: CustomOperationValidationDelegates
        nameWithType: Analyzer.CustomOperationValidationDelegates
        qualifiedName: Microsoft.CST.OAT.Analyzer.CustomOperationValidationDelegates
    isDefinition: true
    commentId: Overload:Microsoft.CST.OAT.Analyzer.CustomOperationValidationDelegates
  System.String:
    name:
      CSharp:
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      VB:
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.String
  Microsoft.CST.OAT.Analyzer.GetValueByPropertyString*:
    name:
      CSharp:
      - id: Microsoft.CST.OAT.Analyzer.GetValueByPropertyString*
        name: GetValueByPropertyString
        nameWithType: Analyzer.GetValueByPropertyString
        qualifiedName: Microsoft.CST.OAT.Analyzer.GetValueByPropertyString
      VB:
      - id: Microsoft.CST.OAT.Analyzer.GetValueByPropertyString*
        name: GetValueByPropertyString
        nameWithType: Analyzer.GetValueByPropertyString
        qualifiedName: Microsoft.CST.OAT.Analyzer.GetValueByPropertyString
    isDefinition: true
    commentId: Overload:Microsoft.CST.OAT.Analyzer.GetValueByPropertyString
  System.Collections.Generic.IEnumerable`1:
    name:
      CSharp:
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: T:System.Collections.Generic.IEnumerable`1
  System.Collections.Generic.IEnumerable{Microsoft.CST.OAT.Violation}:
    name:
      CSharp:
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Microsoft.CST.OAT.Violation
        name: Violation
        nameWithType: Violation
        qualifiedName: Microsoft.CST.OAT.Violation
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Microsoft.CST.OAT.Violation
        name: Violation
        nameWithType: Violation
        qualifiedName: Microsoft.CST.OAT.Violation
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.IEnumerable`1
    parent: System.Collections.Generic
    commentId: T:System.Collections.Generic.IEnumerable{Microsoft.CST.OAT.Violation}
  Microsoft.CST.OAT.Analyzer.PrintViolations*:
    name:
      CSharp:
      - id: Microsoft.CST.OAT.Analyzer.PrintViolations*
        name: PrintViolations
        nameWithType: Analyzer.PrintViolations
        qualifiedName: Microsoft.CST.OAT.Analyzer.PrintViolations
      VB:
      - id: Microsoft.CST.OAT.Analyzer.PrintViolations*
        name: PrintViolations
        nameWithType: Analyzer.PrintViolations
        qualifiedName: Microsoft.CST.OAT.Analyzer.PrintViolations
    isDefinition: true
    commentId: Overload:Microsoft.CST.OAT.Analyzer.PrintViolations
  System.String[]:
    name:
      CSharp:
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: '[]'
        nameWithType: '[]'
        qualifiedName: '[]'
      VB:
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ()
        nameWithType: ()
        qualifiedName: ()
    isDefinition: false
  System.Collections.Generic.IEnumerable{Microsoft.CST.OAT.Rule}:
    name:
      CSharp:
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Microsoft.CST.OAT.Rule
        name: Rule
        nameWithType: Rule
        qualifiedName: Microsoft.CST.OAT.Rule
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Microsoft.CST.OAT.Rule
        name: Rule
        nameWithType: Rule
        qualifiedName: Microsoft.CST.OAT.Rule
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.IEnumerable`1
    parent: System.Collections.Generic
    commentId: T:System.Collections.Generic.IEnumerable{Microsoft.CST.OAT.Rule}
  Microsoft.CST.OAT.Analyzer.GetTags*:
    name:
      CSharp:
      - id: Microsoft.CST.OAT.Analyzer.GetTags*
        name: GetTags
        nameWithType: Analyzer.GetTags
        qualifiedName: Microsoft.CST.OAT.Analyzer.GetTags
      VB:
      - id: Microsoft.CST.OAT.Analyzer.GetTags*
        name: GetTags
        nameWithType: Analyzer.GetTags
        qualifiedName: Microsoft.CST.OAT.Analyzer.GetTags
    isDefinition: true
    commentId: Overload:Microsoft.CST.OAT.Analyzer.GetTags
  System.Collections.Concurrent.ConcurrentStack`1:
    name:
      CSharp:
      - id: System.Collections.Concurrent.ConcurrentStack`1
        name: ConcurrentStack
        nameWithType: ConcurrentStack
        qualifiedName: System.Collections.Concurrent.ConcurrentStack
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Concurrent.ConcurrentStack`1
        name: ConcurrentStack
        nameWithType: ConcurrentStack
        qualifiedName: System.Collections.Concurrent.ConcurrentStack
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: T:System.Collections.Concurrent.ConcurrentStack`1
  System.Collections.Concurrent:
    name:
      CSharp:
      - name: System.Collections.Concurrent
        nameWithType: System.Collections.Concurrent
        qualifiedName: System.Collections.Concurrent
        isExternal: true
      VB:
      - name: System.Collections.Concurrent
        nameWithType: System.Collections.Concurrent
        qualifiedName: System.Collections.Concurrent
    isDefinition: true
    commentId: N:System.Collections.Concurrent
  System.Collections.Concurrent.ConcurrentStack{Microsoft.CST.OAT.Rule}:
    name:
      CSharp:
      - id: System.Collections.Concurrent.ConcurrentStack`1
        name: ConcurrentStack
        nameWithType: ConcurrentStack
        qualifiedName: System.Collections.Concurrent.ConcurrentStack
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Microsoft.CST.OAT.Rule
        name: Rule
        nameWithType: Rule
        qualifiedName: Microsoft.CST.OAT.Rule
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Concurrent.ConcurrentStack`1
        name: ConcurrentStack
        nameWithType: ConcurrentStack
        qualifiedName: System.Collections.Concurrent.ConcurrentStack
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Microsoft.CST.OAT.Rule
        name: Rule
        nameWithType: Rule
        qualifiedName: Microsoft.CST.OAT.Rule
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Concurrent.ConcurrentStack`1
    parent: System.Collections.Concurrent
    commentId: T:System.Collections.Concurrent.ConcurrentStack{Microsoft.CST.OAT.Rule}
  Microsoft.CST.OAT.Analyzer.Analyze*:
    name:
      CSharp:
      - id: Microsoft.CST.OAT.Analyzer.Analyze*
        name: Analyze
        nameWithType: Analyzer.Analyze
        qualifiedName: Microsoft.CST.OAT.Analyzer.Analyze
      VB:
      - id: Microsoft.CST.OAT.Analyzer.Analyze*
        name: Analyze
        nameWithType: Analyzer.Analyze
        qualifiedName: Microsoft.CST.OAT.Analyzer.Analyze
    isDefinition: true
    commentId: Overload:Microsoft.CST.OAT.Analyzer.Analyze
  System.Boolean:
    name:
      CSharp:
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      VB:
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Boolean
  Microsoft.CST.OAT:
    name:
      CSharp:
      - name: Microsoft.CST.OAT
        nameWithType: Microsoft.CST.OAT
        qualifiedName: Microsoft.CST.OAT
      VB:
      - name: Microsoft.CST.OAT
        nameWithType: Microsoft.CST.OAT
        qualifiedName: Microsoft.CST.OAT
    isDefinition: true
    commentId: N:Microsoft.CST.OAT
  Microsoft.CST.OAT.Rule:
    name:
      CSharp:
      - id: Microsoft.CST.OAT.Rule
        name: Rule
        nameWithType: Rule
        qualifiedName: Microsoft.CST.OAT.Rule
      VB:
      - id: Microsoft.CST.OAT.Rule
        name: Rule
        nameWithType: Rule
        qualifiedName: Microsoft.CST.OAT.Rule
    isDefinition: true
    parent: Microsoft.CST.OAT
    commentId: T:Microsoft.CST.OAT.Rule
  Microsoft.CST.OAT.Analyzer.Applies*:
    name:
      CSharp:
      - id: Microsoft.CST.OAT.Analyzer.Applies*
        name: Applies
        nameWithType: Analyzer.Applies
        qualifiedName: Microsoft.CST.OAT.Analyzer.Applies
      VB:
      - id: Microsoft.CST.OAT.Analyzer.Applies*
        name: Applies
        nameWithType: Analyzer.Applies
        qualifiedName: Microsoft.CST.OAT.Analyzer.Applies
    isDefinition: true
    commentId: Overload:Microsoft.CST.OAT.Analyzer.Applies
  Microsoft.CST.OAT.Analyzer.IsRuleValid*:
    name:
      CSharp:
      - id: Microsoft.CST.OAT.Analyzer.IsRuleValid*
        name: IsRuleValid
        nameWithType: Analyzer.IsRuleValid
        qualifiedName: Microsoft.CST.OAT.Analyzer.IsRuleValid
      VB:
      - id: Microsoft.CST.OAT.Analyzer.IsRuleValid*
        name: IsRuleValid
        nameWithType: Analyzer.IsRuleValid
        qualifiedName: Microsoft.CST.OAT.Analyzer.IsRuleValid
    isDefinition: true
    commentId: Overload:Microsoft.CST.OAT.Analyzer.IsRuleValid
  Microsoft.CST.OAT.Analyzer.EnumerateRuleIssues*:
    name:
      CSharp:
      - id: Microsoft.CST.OAT.Analyzer.EnumerateRuleIssues*
        name: EnumerateRuleIssues
        nameWithType: Analyzer.EnumerateRuleIssues
        qualifiedName: Microsoft.CST.OAT.Analyzer.EnumerateRuleIssues
      VB:
      - id: Microsoft.CST.OAT.Analyzer.EnumerateRuleIssues*
        name: EnumerateRuleIssues
        nameWithType: Analyzer.EnumerateRuleIssues
        qualifiedName: Microsoft.CST.OAT.Analyzer.EnumerateRuleIssues
    isDefinition: true
    commentId: Overload:Microsoft.CST.OAT.Analyzer.EnumerateRuleIssues
  Microsoft.CST.OAT.Clause:
    name:
      CSharp:
      - id: Microsoft.CST.OAT.Clause
        name: Clause
        nameWithType: Clause
        qualifiedName: Microsoft.CST.OAT.Clause
      VB:
      - id: Microsoft.CST.OAT.Clause
        name: Clause
        nameWithType: Clause
        qualifiedName: Microsoft.CST.OAT.Clause
    isDefinition: true
    parent: Microsoft.CST.OAT
    commentId: T:Microsoft.CST.OAT.Clause
  Microsoft.CST.OAT.Analyzer.AnalyzeClause*:
    name:
      CSharp:
      - id: Microsoft.CST.OAT.Analyzer.AnalyzeClause*
        name: AnalyzeClause
        nameWithType: Analyzer.AnalyzeClause
        qualifiedName: Microsoft.CST.OAT.Analyzer.AnalyzeClause
      VB:
      - id: Microsoft.CST.OAT.Analyzer.AnalyzeClause*
        name: AnalyzeClause
        nameWithType: Analyzer.AnalyzeClause
        qualifiedName: Microsoft.CST.OAT.Analyzer.AnalyzeClause
    isDefinition: true
    commentId: Overload:Microsoft.CST.OAT.Analyzer.AnalyzeClause
  Microsoft.CST.OAT.Analyzer.GetValueByPropertyOrFieldName*:
    name:
      CSharp:
      - id: Microsoft.CST.OAT.Analyzer.GetValueByPropertyOrFieldName*
        name: GetValueByPropertyOrFieldName
        nameWithType: Analyzer.GetValueByPropertyOrFieldName
        qualifiedName: Microsoft.CST.OAT.Analyzer.GetValueByPropertyOrFieldName
      VB:
      - id: Microsoft.CST.OAT.Analyzer.GetValueByPropertyOrFieldName*
        name: GetValueByPropertyOrFieldName
        nameWithType: Analyzer.GetValueByPropertyOrFieldName
        qualifiedName: Microsoft.CST.OAT.Analyzer.GetValueByPropertyOrFieldName
    isDefinition: true
    commentId: Overload:Microsoft.CST.OAT.Analyzer.GetValueByPropertyOrFieldName
  System.ValueTuple{System.Boolean,System.Boolean}:
    name:
      CSharp:
      - id: System.ValueTuple`2
        name: ValueTuple
        nameWithType: ValueTuple
        qualifiedName: System.ValueTuple
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.ValueTuple`2
        name: ValueTuple
        nameWithType: ValueTuple
        qualifiedName: System.ValueTuple
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System
    commentId: T:System.ValueTuple{System.Boolean,System.Boolean}
  Microsoft.CST.OAT.BOOL_OPERATOR:
    name:
      CSharp:
      - id: Microsoft.CST.OAT.BOOL_OPERATOR
        name: BOOL_OPERATOR
        nameWithType: BOOL_OPERATOR
        qualifiedName: Microsoft.CST.OAT.BOOL_OPERATOR
      VB:
      - id: Microsoft.CST.OAT.BOOL_OPERATOR
        name: BOOL_OPERATOR
        nameWithType: BOOL_OPERATOR
        qualifiedName: Microsoft.CST.OAT.BOOL_OPERATOR
    isDefinition: true
    parent: Microsoft.CST.OAT
    commentId: T:Microsoft.CST.OAT.BOOL_OPERATOR
  Microsoft.CST.OAT.Analyzer.TryShortcut*:
    name:
      CSharp:
      - id: Microsoft.CST.OAT.Analyzer.TryShortcut*
        name: TryShortcut
        nameWithType: Analyzer.TryShortcut
        qualifiedName: Microsoft.CST.OAT.Analyzer.TryShortcut
      VB:
      - id: Microsoft.CST.OAT.Analyzer.TryShortcut*
        name: TryShortcut
        nameWithType: Analyzer.TryShortcut
        qualifiedName: Microsoft.CST.OAT.Analyzer.TryShortcut
    isDefinition: true
    commentId: Overload:Microsoft.CST.OAT.Analyzer.TryShortcut
  Microsoft.CST.OAT.Analyzer:
    name:
      CSharp:
      - id: Microsoft.CST.OAT.Analyzer
        name: Analyzer
        nameWithType: Analyzer
        qualifiedName: Microsoft.CST.OAT.Analyzer
      VB:
      - id: Microsoft.CST.OAT.Analyzer
        name: Analyzer
        nameWithType: Analyzer
        qualifiedName: Microsoft.CST.OAT.Analyzer
    isDefinition: true
    commentId: T:Microsoft.CST.OAT.Analyzer
  System.ValueTuple{System.Boolean,System.Object}:
    name:
      CSharp:
      - id: System.ValueTuple`2
        name: ValueTuple
        nameWithType: ValueTuple
        qualifiedName: System.ValueTuple
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.ValueTuple`2
        name: ValueTuple
        nameWithType: ValueTuple
        qualifiedName: System.ValueTuple
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System
    commentId: T:System.ValueTuple{System.Boolean,System.Object}
  Microsoft.CST.OAT.Analyzer.PropertyExtractionDelegate:
    name:
      CSharp:
      - id: Microsoft.CST.OAT.Analyzer.PropertyExtractionDelegate
        name: Analyzer.PropertyExtractionDelegate
        nameWithType: Analyzer.PropertyExtractionDelegate
        qualifiedName: Microsoft.CST.OAT.Analyzer.PropertyExtractionDelegate
      VB:
      - id: Microsoft.CST.OAT.Analyzer.PropertyExtractionDelegate
        name: Analyzer.PropertyExtractionDelegate
        nameWithType: Analyzer.PropertyExtractionDelegate
        qualifiedName: Microsoft.CST.OAT.Analyzer.PropertyExtractionDelegate
    isDefinition: true
    commentId: T:Microsoft.CST.OAT.Analyzer.PropertyExtractionDelegate
  ? System.ValueTuple{System.Boolean,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}}}
  : name:
      CSharp:
      - id: System.ValueTuple`3
        name: ValueTuple
        nameWithType: ValueTuple
        qualifiedName: System.ValueTuple
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.Collections.Generic.KeyValuePair`2
        name: KeyValuePair
        nameWithType: KeyValuePair
        qualifiedName: System.Collections.Generic.KeyValuePair
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.ValueTuple`3
        name: ValueTuple
        nameWithType: ValueTuple
        qualifiedName: System.ValueTuple
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.Collections.Generic.KeyValuePair`2
        name: KeyValuePair
        nameWithType: KeyValuePair
        qualifiedName: System.Collections.Generic.KeyValuePair
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System
    commentId: T:System.ValueTuple{System.Boolean,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}}}
  Microsoft.CST.OAT.Analyzer.ObjectToValuesDelegate:
    name:
      CSharp:
      - id: Microsoft.CST.OAT.Analyzer.ObjectToValuesDelegate
        name: Analyzer.ObjectToValuesDelegate
        nameWithType: Analyzer.ObjectToValuesDelegate
        qualifiedName: Microsoft.CST.OAT.Analyzer.ObjectToValuesDelegate
      VB:
      - id: Microsoft.CST.OAT.Analyzer.ObjectToValuesDelegate
        name: Analyzer.ObjectToValuesDelegate
        nameWithType: Analyzer.ObjectToValuesDelegate
        qualifiedName: Microsoft.CST.OAT.Analyzer.ObjectToValuesDelegate
    isDefinition: true
    commentId: T:Microsoft.CST.OAT.Analyzer.ObjectToValuesDelegate
  System.Collections.Generic.IEnumerable{System.String}:
    name:
      CSharp:
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.IEnumerable`1
    parent: System.Collections.Generic
    commentId: T:System.Collections.Generic.IEnumerable{System.String}
  System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}}:
    name:
      CSharp:
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.Collections.Generic.KeyValuePair`2
        name: KeyValuePair
        nameWithType: KeyValuePair
        qualifiedName: System.Collections.Generic.KeyValuePair
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.Collections.Generic.KeyValuePair`2
        name: KeyValuePair
        nameWithType: KeyValuePair
        qualifiedName: System.Collections.Generic.KeyValuePair
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.IEnumerable`1
    parent: System.Collections.Generic
    commentId: T:System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}}
  Microsoft.CST.OAT.Analyzer.OperationDelegate:
    name:
      CSharp:
      - id: Microsoft.CST.OAT.Analyzer.OperationDelegate
        name: Analyzer.OperationDelegate
        nameWithType: Analyzer.OperationDelegate
        qualifiedName: Microsoft.CST.OAT.Analyzer.OperationDelegate
      VB:
      - id: Microsoft.CST.OAT.Analyzer.OperationDelegate
        name: Analyzer.OperationDelegate
        nameWithType: Analyzer.OperationDelegate
        qualifiedName: Microsoft.CST.OAT.Analyzer.OperationDelegate
    isDefinition: true
    commentId: T:Microsoft.CST.OAT.Analyzer.OperationDelegate
  System.ValueTuple{System.Boolean,System.Collections.Generic.IEnumerable{Microsoft.CST.OAT.Violation}}:
    name:
      CSharp:
      - id: System.ValueTuple`2
        name: ValueTuple
        nameWithType: ValueTuple
        qualifiedName: System.ValueTuple
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Microsoft.CST.OAT.Violation
        name: Violation
        nameWithType: Violation
        qualifiedName: Microsoft.CST.OAT.Violation
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.ValueTuple`2
        name: ValueTuple
        nameWithType: ValueTuple
        qualifiedName: System.ValueTuple
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Microsoft.CST.OAT.Violation
        name: Violation
        nameWithType: Violation
        qualifiedName: Microsoft.CST.OAT.Violation
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System
    commentId: T:System.ValueTuple{System.Boolean,System.Collections.Generic.IEnumerable{Microsoft.CST.OAT.Violation}}
  Microsoft.CST.OAT.Analyzer.ValidationDelegate:
    name:
      CSharp:
      - id: Microsoft.CST.OAT.Analyzer.ValidationDelegate
        name: Analyzer.ValidationDelegate
        nameWithType: Analyzer.ValidationDelegate
        qualifiedName: Microsoft.CST.OAT.Analyzer.ValidationDelegate
      VB:
      - id: Microsoft.CST.OAT.Analyzer.ValidationDelegate
        name: Analyzer.ValidationDelegate
        nameWithType: Analyzer.ValidationDelegate
        qualifiedName: Microsoft.CST.OAT.Analyzer.ValidationDelegate
    isDefinition: true
    commentId: T:Microsoft.CST.OAT.Analyzer.ValidationDelegate
  Microsoft.CST.OAT.OPERATION:
    name:
      CSharp:
      - id: Microsoft.CST.OAT.OPERATION
        name: OPERATION
        nameWithType: OPERATION
        qualifiedName: Microsoft.CST.OAT.OPERATION
      VB:
      - id: Microsoft.CST.OAT.OPERATION
        name: OPERATION
        nameWithType: OPERATION
        qualifiedName: Microsoft.CST.OAT.OPERATION
    isDefinition: true
    parent: Microsoft.CST.OAT
    commentId: T:Microsoft.CST.OAT.OPERATION
  Microsoft.CST.OAT.Clause.#ctor*:
    name:
      CSharp:
      - id: Microsoft.CST.OAT.Clause.#ctor*
        name: Clause
        nameWithType: Clause.Clause
        qualifiedName: Microsoft.CST.OAT.Clause.Clause
      VB:
      - id: Microsoft.CST.OAT.Clause.#ctor*
        name: Clause
        nameWithType: Clause.Clause
        qualifiedName: Microsoft.CST.OAT.Clause.Clause
    isDefinition: true
    commentId: Overload:Microsoft.CST.OAT.Clause.#ctor
  System.Collections.Generic.List{System.String}:
    name:
      CSharp:
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.List`1
    parent: System.Collections.Generic
    commentId: T:System.Collections.Generic.List{System.String}
  Microsoft.CST.OAT.Clause.Data*:
    name:
      CSharp:
      - id: Microsoft.CST.OAT.Clause.Data*
        name: Data
        nameWithType: Clause.Data
        qualifiedName: Microsoft.CST.OAT.Clause.Data
      VB:
      - id: Microsoft.CST.OAT.Clause.Data*
        name: Data
        nameWithType: Clause.Data
        qualifiedName: Microsoft.CST.OAT.Clause.Data
    isDefinition: true
    commentId: Overload:Microsoft.CST.OAT.Clause.Data
  System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}}:
    name:
      CSharp:
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.Collections.Generic.KeyValuePair`2
        name: KeyValuePair
        nameWithType: KeyValuePair
        qualifiedName: System.Collections.Generic.KeyValuePair
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.Collections.Generic.KeyValuePair`2
        name: KeyValuePair
        nameWithType: KeyValuePair
        qualifiedName: System.Collections.Generic.KeyValuePair
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.List`1
    parent: System.Collections.Generic
    commentId: T:System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}}
  Microsoft.CST.OAT.Clause.DictData*:
    name:
      CSharp:
      - id: Microsoft.CST.OAT.Clause.DictData*
        name: DictData
        nameWithType: Clause.DictData
        qualifiedName: Microsoft.CST.OAT.Clause.DictData
      VB:
      - id: Microsoft.CST.OAT.Clause.DictData*
        name: DictData
        nameWithType: Clause.DictData
        qualifiedName: Microsoft.CST.OAT.Clause.DictData
    isDefinition: true
    commentId: Overload:Microsoft.CST.OAT.Clause.DictData
  Microsoft.CST.OAT.Clause.Field*:
    name:
      CSharp:
      - id: Microsoft.CST.OAT.Clause.Field*
        name: Field
        nameWithType: Clause.Field
        qualifiedName: Microsoft.CST.OAT.Clause.Field
      VB:
      - id: Microsoft.CST.OAT.Clause.Field*
        name: Field
        nameWithType: Clause.Field
        qualifiedName: Microsoft.CST.OAT.Clause.Field
    isDefinition: true
    commentId: Overload:Microsoft.CST.OAT.Clause.Field
  Microsoft.CST.OAT.Clause.Label*:
    name:
      CSharp:
      - id: Microsoft.CST.OAT.Clause.Label*
        name: Label
        nameWithType: Clause.Label
        qualifiedName: Microsoft.CST.OAT.Clause.Label
      VB:
      - id: Microsoft.CST.OAT.Clause.Label*
        name: Label
        nameWithType: Clause.Label
        qualifiedName: Microsoft.CST.OAT.Clause.Label
    isDefinition: true
    commentId: Overload:Microsoft.CST.OAT.Clause.Label
  Microsoft.CST.OAT.Clause.Operation*:
    name:
      CSharp:
      - id: Microsoft.CST.OAT.Clause.Operation*
        name: Operation
        nameWithType: Clause.Operation
        qualifiedName: Microsoft.CST.OAT.Clause.Operation
      VB:
      - id: Microsoft.CST.OAT.Clause.Operation*
        name: Operation
        nameWithType: Clause.Operation
        qualifiedName: Microsoft.CST.OAT.Clause.Operation
    isDefinition: true
    commentId: Overload:Microsoft.CST.OAT.Clause.Operation
  Microsoft.CST.OAT.Clause.CustomOperation*:
    name:
      CSharp:
      - id: Microsoft.CST.OAT.Clause.CustomOperation*
        name: CustomOperation
        nameWithType: Clause.CustomOperation
        qualifiedName: Microsoft.CST.OAT.Clause.CustomOperation
      VB:
      - id: Microsoft.CST.OAT.Clause.CustomOperation*
        name: CustomOperation
        nameWithType: Clause.CustomOperation
        qualifiedName: Microsoft.CST.OAT.Clause.CustomOperation
    isDefinition: true
    commentId: Overload:Microsoft.CST.OAT.Clause.CustomOperation
  Microsoft.CST.OAT.Rule.#ctor*:
    name:
      CSharp:
      - id: Microsoft.CST.OAT.Rule.#ctor*
        name: Rule
        nameWithType: Rule.Rule
        qualifiedName: Microsoft.CST.OAT.Rule.Rule
      VB:
      - id: Microsoft.CST.OAT.Rule.#ctor*
        name: Rule
        nameWithType: Rule.Rule
        qualifiedName: Microsoft.CST.OAT.Rule.Rule
    isDefinition: true
    commentId: Overload:Microsoft.CST.OAT.Rule.#ctor
  System.Collections.Generic.List{Microsoft.CST.OAT.Clause}:
    name:
      CSharp:
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Microsoft.CST.OAT.Clause
        name: Clause
        nameWithType: Clause
        qualifiedName: Microsoft.CST.OAT.Clause
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Microsoft.CST.OAT.Clause
        name: Clause
        nameWithType: Clause
        qualifiedName: Microsoft.CST.OAT.Clause
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.List`1
    parent: System.Collections.Generic
    commentId: T:System.Collections.Generic.List{Microsoft.CST.OAT.Clause}
  Microsoft.CST.OAT.Rule.Clauses*:
    name:
      CSharp:
      - id: Microsoft.CST.OAT.Rule.Clauses*
        name: Clauses
        nameWithType: Rule.Clauses
        qualifiedName: Microsoft.CST.OAT.Rule.Clauses
      VB:
      - id: Microsoft.CST.OAT.Rule.Clauses*
        name: Clauses
        nameWithType: Rule.Clauses
        qualifiedName: Microsoft.CST.OAT.Rule.Clauses
    isDefinition: true
    commentId: Overload:Microsoft.CST.OAT.Rule.Clauses
  Microsoft.CST.OAT.Rule.Description*:
    name:
      CSharp:
      - id: Microsoft.CST.OAT.Rule.Description*
        name: Description
        nameWithType: Rule.Description
        qualifiedName: Microsoft.CST.OAT.Rule.Description
      VB:
      - id: Microsoft.CST.OAT.Rule.Description*
        name: Description
        nameWithType: Rule.Description
        qualifiedName: Microsoft.CST.OAT.Rule.Description
    isDefinition: true
    commentId: Overload:Microsoft.CST.OAT.Rule.Description
  Microsoft.CST.OAT.Rule.Expression*:
    name:
      CSharp:
      - id: Microsoft.CST.OAT.Rule.Expression*
        name: Expression
        nameWithType: Rule.Expression
        qualifiedName: Microsoft.CST.OAT.Rule.Expression
      VB:
      - id: Microsoft.CST.OAT.Rule.Expression*
        name: Expression
        nameWithType: Rule.Expression
        qualifiedName: Microsoft.CST.OAT.Rule.Expression
    isDefinition: true
    commentId: Overload:Microsoft.CST.OAT.Rule.Expression
  Microsoft.CST.OAT.Rule.Name*:
    name:
      CSharp:
      - id: Microsoft.CST.OAT.Rule.Name*
        name: Name
        nameWithType: Rule.Name
        qualifiedName: Microsoft.CST.OAT.Rule.Name
      VB:
      - id: Microsoft.CST.OAT.Rule.Name*
        name: Name
        nameWithType: Rule.Name
        qualifiedName: Microsoft.CST.OAT.Rule.Name
    isDefinition: true
    commentId: Overload:Microsoft.CST.OAT.Rule.Name
  Microsoft.CST.OAT.Rule.Target*:
    name:
      CSharp:
      - id: Microsoft.CST.OAT.Rule.Target*
        name: Target
        nameWithType: Rule.Target
        qualifiedName: Microsoft.CST.OAT.Rule.Target
      VB:
      - id: Microsoft.CST.OAT.Rule.Target*
        name: Target
        nameWithType: Rule.Target
        qualifiedName: Microsoft.CST.OAT.Rule.Target
    isDefinition: true
    commentId: Overload:Microsoft.CST.OAT.Rule.Target
  System.Int32:
    name:
      CSharp:
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      VB:
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Int32
  Microsoft.CST.OAT.Rule.Severity*:
    name:
      CSharp:
      - id: Microsoft.CST.OAT.Rule.Severity*
        name: Severity
        nameWithType: Rule.Severity
        qualifiedName: Microsoft.CST.OAT.Rule.Severity
      VB:
      - id: Microsoft.CST.OAT.Rule.Severity*
        name: Severity
        nameWithType: Rule.Severity
        qualifiedName: Microsoft.CST.OAT.Rule.Severity
    isDefinition: true
    commentId: Overload:Microsoft.CST.OAT.Rule.Severity
  Microsoft.CST.OAT.Rule.Tags*:
    name:
      CSharp:
      - id: Microsoft.CST.OAT.Rule.Tags*
        name: Tags
        nameWithType: Rule.Tags
        qualifiedName: Microsoft.CST.OAT.Rule.Tags
      VB:
      - id: Microsoft.CST.OAT.Rule.Tags*
        name: Tags
        nameWithType: Rule.Tags
        qualifiedName: Microsoft.CST.OAT.Rule.Tags
    isDefinition: true
    commentId: Overload:Microsoft.CST.OAT.Rule.Tags
  Microsoft.CST.OAT.Violation.rule*:
    name:
      CSharp:
      - id: Microsoft.CST.OAT.Violation.rule*
        name: rule
        nameWithType: Violation.rule
        qualifiedName: Microsoft.CST.OAT.Violation.rule
      VB:
      - id: Microsoft.CST.OAT.Violation.rule*
        name: rule
        nameWithType: Violation.rule
        qualifiedName: Microsoft.CST.OAT.Violation.rule
    isDefinition: true
    commentId: Overload:Microsoft.CST.OAT.Violation.rule
  Microsoft.CST.OAT.Clause[]:
    name:
      CSharp:
      - id: Microsoft.CST.OAT.Clause
        name: Clause
        nameWithType: Clause
        qualifiedName: Microsoft.CST.OAT.Clause
      - name: '[]'
        nameWithType: '[]'
        qualifiedName: '[]'
      VB:
      - id: Microsoft.CST.OAT.Clause
        name: Clause
        nameWithType: Clause
        qualifiedName: Microsoft.CST.OAT.Clause
      - name: ()
        nameWithType: ()
        qualifiedName: ()
    isDefinition: false
  Microsoft.CST.OAT.Violation.clauses*:
    name:
      CSharp:
      - id: Microsoft.CST.OAT.Violation.clauses*
        name: clauses
        nameWithType: Violation.clauses
        qualifiedName: Microsoft.CST.OAT.Violation.clauses
      VB:
      - id: Microsoft.CST.OAT.Violation.clauses*
        name: clauses
        nameWithType: Violation.clauses
        qualifiedName: Microsoft.CST.OAT.Violation.clauses
    isDefinition: true
    commentId: Overload:Microsoft.CST.OAT.Violation.clauses
  Microsoft.CST.OAT.Violation.description*:
    name:
      CSharp:
      - id: Microsoft.CST.OAT.Violation.description*
        name: description
        nameWithType: Violation.description
        qualifiedName: Microsoft.CST.OAT.Violation.description
      VB:
      - id: Microsoft.CST.OAT.Violation.description*
        name: description
        nameWithType: Violation.description
        qualifiedName: Microsoft.CST.OAT.Violation.description
    isDefinition: true
    commentId: Overload:Microsoft.CST.OAT.Violation.description
  System.ArgumentNullException:
    commentId: T:System.ArgumentNullException
  Microsoft.CST.OAT.Violation.#ctor*:
    name:
      CSharp:
      - id: Microsoft.CST.OAT.Violation.#ctor*
        name: Violation
        nameWithType: Violation.Violation
        qualifiedName: Microsoft.CST.OAT.Violation.Violation
      VB:
      - id: Microsoft.CST.OAT.Violation.#ctor*
        name: Violation
        nameWithType: Violation.Violation
        qualifiedName: Microsoft.CST.OAT.Violation.Violation
    isDefinition: true
    commentId: Overload:Microsoft.CST.OAT.Violation.#ctor
  Microsoft.CST.OAT.Violation:
    name:
      CSharp:
      - id: Microsoft.CST.OAT.Violation
        name: Violation
        nameWithType: Violation
        qualifiedName: Microsoft.CST.OAT.Violation
      VB:
      - id: Microsoft.CST.OAT.Violation
        name: Violation
        nameWithType: Violation
        qualifiedName: Microsoft.CST.OAT.Violation
    isDefinition: true
    commentId: T:Microsoft.CST.OAT.Violation
  Microsoft.CST.OAT.Utils.Strings.Get*:
    name:
      CSharp:
      - id: Microsoft.CST.OAT.Utils.Strings.Get*
        name: Get
        nameWithType: Strings.Get
        qualifiedName: Microsoft.CST.OAT.Utils.Strings.Get
      VB:
      - id: Microsoft.CST.OAT.Utils.Strings.Get*
        name: Get
        nameWithType: Strings.Get
        qualifiedName: Microsoft.CST.OAT.Utils.Strings.Get
    isDefinition: true
    commentId: Overload:Microsoft.CST.OAT.Utils.Strings.Get
  Microsoft.CST.OAT.Utils.Strings.Setup*:
    name:
      CSharp:
      - id: Microsoft.CST.OAT.Utils.Strings.Setup*
        name: Setup
        nameWithType: Strings.Setup
        qualifiedName: Microsoft.CST.OAT.Utils.Strings.Setup
      VB:
      - id: Microsoft.CST.OAT.Utils.Strings.Setup*
        name: Setup
        nameWithType: Strings.Setup
        qualifiedName: Microsoft.CST.OAT.Utils.Strings.Setup
    isDefinition: true
    commentId: Overload:Microsoft.CST.OAT.Utils.Strings.Setup
  Microsoft.CST.OAT.Utils.Strings.IsLoaded*:
    name:
      CSharp:
      - id: Microsoft.CST.OAT.Utils.Strings.IsLoaded*
        name: IsLoaded
        nameWithType: Strings.IsLoaded
        qualifiedName: Microsoft.CST.OAT.Utils.Strings.IsLoaded
      VB:
      - id: Microsoft.CST.OAT.Utils.Strings.IsLoaded*
        name: IsLoaded
        nameWithType: Strings.IsLoaded
        qualifiedName: Microsoft.CST.OAT.Utils.Strings.IsLoaded
    isDefinition: true
    commentId: Overload:Microsoft.CST.OAT.Utils.Strings.IsLoaded
  Microsoft.CST.OAT.Utils.Strings:
    name:
      CSharp:
      - id: Microsoft.CST.OAT.Utils.Strings
        name: Strings
        nameWithType: Strings
        qualifiedName: Microsoft.CST.OAT.Utils.Strings
      VB:
      - id: Microsoft.CST.OAT.Utils.Strings
        name: Strings
        nameWithType: Strings
        qualifiedName: Microsoft.CST.OAT.Utils.Strings
    isDefinition: true
    commentId: T:Microsoft.CST.OAT.Utils.Strings
  Microsoft.CST.OAT.Utils:
    name:
      CSharp:
      - name: Microsoft.CST.OAT.Utils
        nameWithType: Microsoft.CST.OAT.Utils
        qualifiedName: Microsoft.CST.OAT.Utils
      VB:
      - name: Microsoft.CST.OAT.Utils
        nameWithType: Microsoft.CST.OAT.Utils
        qualifiedName: Microsoft.CST.OAT.Utils
    isDefinition: true
    commentId: N:Microsoft.CST.OAT.Utils
